{"ast":null,"code":"var _jsxFileName = \"/home/alexkhan/Documents/meet-friends/frontend/src/components/directMessages/directMessages.js\";\nimport React, { Component, Fragment } from \"react\";\nimport { Menu, Icon } from \"semantic-ui-react\";\nimport firebase from \"../../Auth/firebase\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\n\nclass directMessages extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      user: this.props.user,\n      users: [],\n      userRef: firebase.database().ref(\"users\"),\n      connectedRef: firebase.database().ref(\".info/connected\"),\n      presenceRef: firebase.database().ref(\"presence\")\n    };\n\n    this.addListeners = currentUserUid => {\n      const {\n        userRef,\n        connectedRef,\n        presenceRef\n      } = this.state;\n      let loadedUsers = [];\n      userRef.on(\"child_added\", snap => {\n        let user = snap.val();\n        user[\"uid\"] = snap.key;\n        user[\"status\"] = \"offline\";\n        loadedUsers.push(user);\n        this.setState({\n          users: loadedUsers\n        });\n      }); // console.log(loadedUsers)\n\n      connectedRef.on(\"value\", snap => {\n        if (snap.val() === true) {\n          const ref = presenceRef.child(currentUserUid);\n          ref.set(true);\n          ref.onDisconnect().remove(err => {\n            if (err !== null) {\n              console.error(err);\n            }\n          });\n        }\n      });\n      presenceRef.on(\"child_added\", snap => {\n        if (currentUserUid !== snap.key) {\n          this.addStatusToUser(snap.key);\n        }\n      });\n      presenceRef.on(\"child_removed\", snap => {\n        if (currentUserUid !== snap.key) {\n          this.addStatusToUser(snap.key, false);\n        }\n      });\n    };\n\n    this.addStatusToUser = (userId, connected = true) => {\n      const updatedUsers = this.state.users.reduce((acc, user) => {\n        if (user.uid === userId) {\n          user[\"status\"] = `${connected ? \"online\" : \"offline\"}`;\n        }\n\n        return acc.concat(user);\n      }, []);\n      this.setState({\n        users: updatedUsers\n      });\n    };\n\n    this.isUserOnline = user => user.status === 'online';\n  }\n\n  componentDidMount() {\n    if (this.state.user) {\n      this.addListeners(this.state.user.uid);\n    }\n  }\n\n  render() {\n    const {\n      users\n    } = this.state;\n    return /*#__PURE__*/React.createElement(Menu.Menu, {\n      className: \"menu\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Menu.Item, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Icon, {\n      name: \"mail\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }\n    }), \"DIRECT MESSAGES\"), \" \", users ? users.length - 1 : users.length), /*#__PURE__*/React.createElement(Menu.Item, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }\n    }, users ? /*#__PURE__*/React.createElement(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }\n    }, users.map(user => /*#__PURE__*/React.createElement(Menu.Item, {\n      key: user.uid // active={user.uid === activeChannel}\n      ,\n      onClick: () => console.log(user),\n      style: {\n        opacity: 0.7,\n        fontStyle: \"italic\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Icon, {\n      name: \"circle\",\n      color: this.isUserOnline(user) ? \"green\" : \"red\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 19\n      }\n    }), \"@ \", this.state.user.uid && user.uid !== this.state.user.uid ? user.username : ''))) : /*#__PURE__*/React.createElement(CircularProgress, {\n      size: 20,\n      disableShrink: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nexport default directMessages;","map":{"version":3,"sources":["/home/alexkhan/Documents/meet-friends/frontend/src/components/directMessages/directMessages.js"],"names":["React","Component","Fragment","Menu","Icon","firebase","CircularProgress","directMessages","state","user","props","users","userRef","database","ref","connectedRef","presenceRef","addListeners","currentUserUid","loadedUsers","on","snap","val","key","push","setState","child","set","onDisconnect","remove","err","console","error","addStatusToUser","userId","connected","updatedUsers","reduce","acc","uid","concat","isUserOnline","status","componentDidMount","render","length","map","log","opacity","fontStyle","username"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from \"react\";\nimport { Menu, Icon } from \"semantic-ui-react\";\nimport firebase from \"../../Auth/firebase\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\n\n\n\n\n\n\n\nclass directMessages extends Component {\n  state = {\n    user: this.props.user,  \n    users: [],\n    userRef: firebase.database().ref(\"users\"),\n    connectedRef: firebase.database().ref(\".info/connected\"),\n    presenceRef: firebase.database().ref(\"presence\"),\n  };\n\n  componentDidMount() {\n    if (this.state.user) {\n      this.addListeners(this.state.user.uid);\n    }\n  }\n  addListeners = (currentUserUid) => {\n    const { userRef, connectedRef, presenceRef } = this.state;\n    let loadedUsers = [];\n    userRef.on(\"child_added\", (snap) => {\n      let user = snap.val();\n      user[\"uid\"] = snap.key;\n      user[\"status\"] = \"offline\";\n      loadedUsers.push(user);\n      this.setState({ users: loadedUsers });\n    });\n    // console.log(loadedUsers)\n    connectedRef.on(\"value\", (snap) => {\n      if (snap.val() === true) {\n        const ref = presenceRef.child(currentUserUid);\n        ref.set(true);\n        ref.onDisconnect().remove((err) => {\n          if (err !== null) {\n            console.error(err);\n          }\n        });\n      }\n    });\n\n    presenceRef.on(\"child_added\", (snap) => {\n      if (currentUserUid !== snap.key) {\n        this.addStatusToUser(snap.key);\n      }\n    });\n\n    presenceRef.on(\"child_removed\", (snap) => {\n      if (currentUserUid !== snap.key) {\n        this.addStatusToUser(snap.key, false);\n      }\n    });\n  };\n\n  addStatusToUser = (userId, connected = true) => {\n    const updatedUsers = this.state.users.reduce((acc, user) => {\n      if (user.uid === userId) {\n        user[\"status\"] = `${connected ? \"online\" : \"offline\"}`;\n      }\n      return acc.concat(user);\n    }, []);\n    this.setState({ users: updatedUsers });\n  };\n\n  isUserOnline =(user) => user.status === 'online'\n\n  render() {\n    const { users } = this.state;\n    \n    \n    return (\n      <Menu.Menu className=\"menu\">\n        <Menu.Item>\n          <span>\n            <Icon name=\"mail\" />\n            DIRECT MESSAGES\n          </span>{\" \"}\n          {users ? users.length - 1: users.length}\n        </Menu.Item>\n        <Menu.Item>\n        {users? (\n        <Fragment>\n      {users.map(user => (\n                <Menu.Item\n                  key={user.uid}\n                  // active={user.uid === activeChannel}\n                  onClick={() =>console.log(user)}\n                  style={{ opacity: 0.7, fontStyle: \"italic\" }}\n                >\n                  <Icon\n                    name=\"circle\"\n                    color={this.isUserOnline(user) ? \"green\" : \"red\"}\n                  />\n                  @ {this.state.user.uid && user.uid !== this.state.user.uid ? user.username: '' }\n                </Menu.Item>\n              ))}\n        </Fragment>):(\n          <CircularProgress size={20} disableShrink />\n        )}\n        </Menu.Item>\n      </Menu.Menu>\n    );\n  }\n}\n\nexport default directMessages;\n"]},"metadata":{},"sourceType":"module"}