{"ast":null,"code":"import { LOADING_USER, LOADING_UI, SET_GOOGLE_USER, SET_ERRORS, CLEAR_ERRORS } from \"../store/types\";\nimport firebase from \"../../Auth/firebase\";\nimport axios from \"axios\";\nimport jwt_decode from \"jwt-decode\";\nexport const multiAuth = (provider, firstScope, secondScope) => dispatch => {\n  provider.addScope(`${firstScope}`);\n  if (secondScope) provider.addScope(`${secondScope}`);\n  firebase.auth().signInWithPopup(provider).then(result => {\n    if (result.credential) {\n      const {\n        user,\n        credential\n      } = result;\n      const {\n        accessToken\n      } = credential;\n      let token;\n      console.log(accessToken);\n      const {\n        displayName,\n        email,\n        xa\n      } = user;\n      console.log(firebase.auth().currentUser);\n      token = xa;\n      const {\n        picture,\n        user_id\n      } = jwt_decode(token);\n      const userData = {\n        email: email,\n        username: displayName,\n        profileImage: picture\n      };\n      dispatch(googleSignup(userData, user_id));\n    }\n  }).catch(err => {\n    dispatch({\n      type: SET_ERRORS,\n      payload: err\n    });\n    console.log(err);\n  });\n};\nexport const authenticateGoogle = () => dispatch => {\n  dispatch({\n    type: LOADING_UI\n  });\n  const provider = new firebase.auth.GoogleAuthProvider();\n  let profile = \"profile\";\n  let email = \"email\";\n  dispatch(multiAuth(provider, profile, email));\n};\nexport const authenticateGithub = () => dispatch => {\n  dispatch({\n    type: LOADING_UI\n  });\n  const provider = new firebase.auth.GithubAuthProvider();\n  let repo = \"repo\"; // let email = \"email\"\n\n  dispatch(multiAuth(provider, repo));\n};\nexport const login = (email, password, history) => dispatch => {\n  firebase.auth().signInWithEmailAndPassword().then(data => {\n    if (data) {\n      history.push(\"/\");\n    }\n  });\n};\nexport const googleSignup = (userData, userId) => dispatch => {\n  dispatch({\n    type: LOADING_USER\n  });\n  axios.post(`/google/${userId}`, userData).then(res => {\n    dispatch({\n      type: SET_GOOGLE_USER,\n      payload: res.data\n    }); // window.location.href = \"/\"\n  }).catch(err => console.log(err));\n};\nexport const loginUser = (userData, history) => dispatch => {\n  dispatch({\n    type: LOADING_UI\n  });\n  axios.post(\"/login\", userData).then(() => {\n    dispatch(login(userData.email, userData.password));\n  }).catch(err => {\n    dispatch({\n      type: SET_ERRORS,\n      payload: err.response.data\n    });\n  });\n};\nexport const signupUser = (newUserData, history) => dispatch => {\n  dispatch({\n    type: LOADING_UI\n  });\n  axios.post(\"/signup\", newUserData).then(res => {\n    dispatch({\n      type: CLEAR_ERRORS\n    });\n    history.push(\"/\");\n    window.location.reload();\n  }).catch(err => {\n    dispatch({\n      type: SET_ERRORS,\n      payload: err.response.data\n    });\n  });\n};","map":{"version":3,"sources":["/home/alexkhan/Documents/meet-friends/frontend/src/redux/actions/userActions.js"],"names":["LOADING_USER","LOADING_UI","SET_GOOGLE_USER","SET_ERRORS","CLEAR_ERRORS","firebase","axios","jwt_decode","multiAuth","provider","firstScope","secondScope","dispatch","addScope","auth","signInWithPopup","then","result","credential","user","accessToken","token","console","log","displayName","email","xa","currentUser","picture","user_id","userData","username","profileImage","googleSignup","catch","err","type","payload","authenticateGoogle","GoogleAuthProvider","profile","authenticateGithub","GithubAuthProvider","repo","login","password","history","signInWithEmailAndPassword","data","push","userId","post","res","loginUser","response","signupUser","newUserData","window","location","reload"],"mappings":"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","sourcesContent":["import {LOADING_USER,LOADING_UI, SET_GOOGLE_USER,SET_ERRORS,CLEAR_ERRORS} from \"../store/types\"\nimport firebase from \"../../Auth/firebase\"\nimport axios from \"axios\"\nimport jwt_decode from \"jwt-decode\"\n\n\n\n\n\n\nexport const multiAuth = (provider,firstScope,secondScope) => (dispatch)=> {\n    provider.addScope(`${firstScope}`);\n    if(secondScope)provider.addScope(`${secondScope}`)\n    firebase.auth().signInWithPopup(provider)\n    .then((result) =>{\n        if (result.credential) {\n        const {user,credential} = result\n        const {accessToken} = credential\n        let token;   \n        console.log(accessToken)   \n        const  {displayName, email,xa} = user\n        console.log(firebase.auth().currentUser)\n        token = xa\n        const {picture,user_id} =  jwt_decode(token)   \n\n        const userData = {\n             email: email,\n             username: displayName,\n             profileImage: picture\n        }\n       \n        dispatch(googleSignup(userData,user_id))\n        }   \n      }) \n    .catch((err) => {\n        dispatch({\n            type: SET_ERRORS,\n            payload: err\n        })\n        console.log(err)\n    });\n\n}\n\n\nexport const authenticateGoogle = () => (dispatch) => {\n    dispatch({type: LOADING_UI})\n    const provider = new firebase.auth.GoogleAuthProvider()\n    let profile = \"profile\"\n    let email = \"email\"\n    dispatch(multiAuth(provider,profile,email))\n\n}\n\nexport const authenticateGithub = () => (dispatch) => {\n    dispatch({type: LOADING_UI})\n    const provider = new firebase.auth.GithubAuthProvider()\n    let repo = \"repo\"\n    // let email = \"email\"\n    dispatch(multiAuth(provider,repo))\n}\nexport const login = (email,password,history) => (dispatch) => {\n  firebase.auth().signInWithEmailAndPassword().then(data=> {\n    if(data){\n      history.push(\"/\")\n    }\n  })\n}\n\nexport const googleSignup = (userData,userId) => (dispatch) => {\n    dispatch({type: LOADING_USER})\n    axios.post(`/google/${userId}`,userData)\n    .then(res=> {\n        dispatch({\n            type: SET_GOOGLE_USER,\n            payload: res.data\n        })\n        \n        // window.location.href = \"/\"\n    })\n    .catch((err) => console.log(err));\n\n}\n\nexport const loginUser = (userData, history) => (dispatch) => {\n    dispatch({ type: LOADING_UI });\n    axios\n      .post(\"/login\", userData)\n      .then( () => {\n        dispatch(login(userData.email,userData.password))\n    \n      })\n      .catch((err) => {\n        dispatch({\n          type: SET_ERRORS,\n          payload: err.response.data,\n        });\n      });\n  };\n  \n  export const signupUser = (newUserData, history) => (dispatch) => {\n   \n    dispatch({ type: LOADING_UI });\n    axios\n      .post(\"/signup\", newUserData)\n      .then( (res) => {\n        dispatch({ type: CLEAR_ERRORS }); \n          history.push(\"/\")\n          window.location.reload();\n    \n      })\n      .catch((err) => {\n        dispatch({\n          type: SET_ERRORS,\n          payload: err.response.data,\n        });\n      });\n  };\n  "]},"metadata":{},"sourceType":"module"}