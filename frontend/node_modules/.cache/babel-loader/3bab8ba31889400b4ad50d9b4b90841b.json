{"ast":null,"code":"import { LOADING_UI, SET_ERRORS, SET_AUTHENTICATED, SET_USER, STOP_LOADING_UI, SET_CURRENT_CHANNEL } from \"../store/types\";\nimport firebase from \"../../Auth/firebase\";\nimport axios from \"axios\";\nimport jwt_decode from \"jwt-decode\";\nimport config from \"../../config/config\";\nimport React from \"react\";\nexport const login = (email, password) => (dispatch, next) => {\n  firebase.auth().signInWithEmailAndPassword(email, password).then(data => {\n    if (data) {\n      const {\n        email\n      } = data.user;\n      dispatch(getCurrentUser(email));\n      dispatch(registerUser(data));\n    }\n  }).catch(err => {\n    dispatch({\n      type: SET_ERRORS,\n      payload: err\n    });\n  });\n};\nexport const register = userData => {\n  firebase.auth().createUserWithEmailAndPassword(userData.email, userData.password);\n};\nexport const multiAuth = (provider, scope) => dispatch => {\n  provider.addScope(`${scope[0]}`);\n  if (scope[1]) provider.addScope(`${scope[1]}`);\n  firebase.auth().signInWithPopup(provider).then(result => {\n    if (result.credential) {\n      const {\n        user\n      } = result;\n      let token;\n      const {\n        displayName,\n        email,\n        xa\n      } = user;\n      token = xa;\n      const {\n        picture,\n        user_id\n      } = jwt_decode(token);\n      const userData = {\n        email: email,\n        username: displayName,\n        profileImage: picture\n      };\n      dispatch(getCurrentUser(email));\n      dispatch(googleSignup(userData, user_id));\n      dispatch(registerUser(result));\n    }\n  }).catch(err => {\n    dispatch({\n      type: SET_ERRORS,\n      payload: err\n    });\n  });\n};\nexport const authenticateGoogle = () => dispatch => {\n  dispatch({\n    type: LOADING_UI\n  });\n  const provider = new firebase.auth.GoogleAuthProvider();\n  let scope = [\"profile\", \"email\"];\n  dispatch(multiAuth(provider, scope));\n};\nexport const registerUser = createdUser => {\n  const defaultProfileImage = \"profile.png\";\n  const defaultCoverImage = \"download.png\";\n  const userId = firebase.auth().currentUser.uid;\n  console.log(userId);\n  const regUser = firebase.database().ref(\"users\");\n  const userRef = firebase.database().ref(\"/users/\" + userId).once(\"value\").then(snapshot => {\n    console.log(snapshot.val());\n\n    if (snapshot.val() !== null) {\n      return {\n        type: SET_ERRORS,\n        payload: {\n          email: `${snapshot.val().email} exists`\n        }\n      };\n    } else {\n      console.log(createdUser);\n      return regUser.child(createdUser.user.uid).set({\n        email: createdUser.user.email,\n        username: createdUser.user.displayName,\n        profileImage: `https://firebasestorage.googleapis.com/v0/b/${config.storageBucket}/o/${defaultProfileImage}?alt=media`,\n        coverImage: `https://firebasestorage.googleapis.com/v0/b/${config.storageBucket}/o/${defaultCoverImage}?alt=media`,\n        userId: userId\n      });\n    }\n  });\n}; // export const authenticateFaceBook = () => (dispatch) => {\n//   dispatch({type: LOADING_UI})\n//   const provider = new firebase.auth.FacebookAuthProvider()\n//   let scope = [\"user_birthday\"]\n//   dispatch(multiAuth(provider,scope))\n// }\n\nexport const authenticateGithub = () => dispatch => {\n  dispatch({\n    type: LOADING_UI\n  });\n  const provider = new firebase.auth.GithubAuthProvider();\n  let scope = [\"repo\"]; // let email = \"email\"\n\n  dispatch(multiAuth(provider, scope));\n};\nexport const googleSignup = (userData, userId) => dispatch => {\n  dispatch({\n    type: LOADING_UI\n  });\n  axios.post(`/google/${userId}`, userData).then(res => {\n    if (res.data) {\n      return;\n    }\n  }).catch(err => {\n    dispatch({\n      type: SET_ERRORS,\n      payload: err\n    });\n  });\n};\nexport const loginUser = userData => dispatch => {\n  dispatch({\n    type: LOADING_UI\n  });\n  axios.post(\"/login\", userData).then(() => {\n    dispatch(login(userData.email, userData.password));\n  }).catch(err => {\n    dispatch({\n      type: SET_ERRORS,\n      payload: err.response.data\n    });\n  });\n};\nexport const signupUser = newUserData => dispatch => {\n  dispatch({\n    type: LOADING_UI\n  });\n  axios.post(\"/signup\", newUserData).then(() => {\n    dispatch(login(newUserData.email, newUserData.password));\n  }).catch(err => {\n    dispatch({\n      type: SET_ERRORS,\n      payload: err.response.data\n    });\n  });\n};\nexport const setAuthenticatedUser = user => {\n  return {\n    type: SET_AUTHENTICATED,\n    payload: user\n  };\n};\nexport const getCurrentUser = email => dispatch => {\n  dispatch({\n    type: LOADING_UI\n  });\n  axios.get(`/user/${email}`).then(user => {\n    if (user) {\n      dispatch({\n        type: SET_USER,\n        payload: user.data\n      });\n    }\n  }).then(() => {\n    dispatch({\n      type: STOP_LOADING_UI\n    });\n  }).catch(err => {\n    console.log(err);\n  });\n};\nexport const setCurrentChannel = channel => dispatch => {\n  dispatch({\n    type: SET_CURRENT_CHANNEL,\n    payload: {\n      currentChannel: channel\n    }\n  });\n};","map":{"version":3,"sources":["/home/alexkhan/Documents/meet-friends/frontend/src/redux/actions/actions.js"],"names":["LOADING_UI","SET_ERRORS","SET_AUTHENTICATED","SET_USER","STOP_LOADING_UI","SET_CURRENT_CHANNEL","firebase","axios","jwt_decode","config","React","login","email","password","dispatch","next","auth","signInWithEmailAndPassword","then","data","user","getCurrentUser","registerUser","catch","err","type","payload","register","userData","createUserWithEmailAndPassword","multiAuth","provider","scope","addScope","signInWithPopup","result","credential","token","displayName","xa","picture","user_id","username","profileImage","googleSignup","authenticateGoogle","GoogleAuthProvider","createdUser","defaultProfileImage","defaultCoverImage","userId","currentUser","uid","console","log","regUser","database","ref","userRef","once","snapshot","val","child","set","storageBucket","coverImage","authenticateGithub","GithubAuthProvider","post","res","loginUser","response","signupUser","newUserData","setAuthenticatedUser","get","setCurrentChannel","channel","currentChannel"],"mappings":"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","sourcesContent":["import {\n  LOADING_UI,\n  SET_ERRORS,\n  SET_AUTHENTICATED,\n  SET_USER,\n  STOP_LOADING_UI,\n  SET_CURRENT_CHANNEL,\n} from \"../store/types\";\nimport firebase from \"../../Auth/firebase\";\nimport axios from \"axios\";\nimport jwt_decode from \"jwt-decode\";\nimport config from \"../../config/config\";\nimport React from \"react\"\n\nexport const login = (email, password) => (dispatch, next) => {\n  firebase\n    .auth()\n    .signInWithEmailAndPassword(email, password)\n    .then((data) => {\n      if (data) {\n        const { email } = data.user;\n        dispatch(getCurrentUser(email));\n        dispatch(registerUser(data))\n      }\n    })\n    .catch((err) => {\n      dispatch({\n        type: SET_ERRORS,\n        payload: err,\n      });\n    });\n};\n\nexport const register = (userData) => {\n  firebase.auth().createUserWithEmailAndPassword(userData.email,userData.password)\n}\n\nexport const multiAuth = (provider, scope) => (dispatch) => {\n  provider.addScope(`${scope[0]}`);\n  if (scope[1]) provider.addScope(`${scope[1]}`);\n  firebase\n    .auth()\n    .signInWithPopup(provider)\n    .then((result) => {\n      if (result.credential) {\n        const { user } = result;\n        let token;\n        const { displayName, email, xa } = user;\n        token = xa;\n        const { picture, user_id } = jwt_decode(token);\n\n        const userData = {\n          email: email,\n          username: displayName,\n          profileImage: picture,\n        };\n        dispatch(getCurrentUser(email));\n        dispatch(googleSignup(userData, user_id));\n        dispatch(registerUser(result))\n      }\n    })\n    .catch((err) => {\n      dispatch({\n        type: SET_ERRORS,\n        payload: err,\n      });\n    });\n};\n\nexport const authenticateGoogle = () => (dispatch) => {\n  dispatch({ type: LOADING_UI });\n  const provider = new firebase.auth.GoogleAuthProvider();\n  let scope = [\"profile\", \"email\"];\n  dispatch(multiAuth(provider, scope));\n};\n\nexport const registerUser = (createdUser) => {\n  const defaultProfileImage = \"profile.png\";\n  const defaultCoverImage = \"download.png\";\n  const userId = firebase.auth().currentUser.uid;\n  console.log(userId)\n  const regUser = firebase.database().ref(\"users\");\n  const userRef = firebase\n    .database()\n    .ref(\"/users/\" + userId)\n    .once(\"value\")\n    .then((snapshot) => {\n      console.log(snapshot.val())\n      if (snapshot.val() !== null) {\n\n        return {\n          type: SET_ERRORS,\n          payload: { email: `${snapshot.val().email} exists` },\n        };\n      } else {\n        console.log(createdUser)\n        return regUser.child(createdUser.user.uid).set({\n          email: createdUser.user.email,\n          username: createdUser.user.displayName,\n          profileImage: `https://firebasestorage.googleapis.com/v0/b/${config.storageBucket}/o/${defaultProfileImage}?alt=media`,\n          coverImage: `https://firebasestorage.googleapis.com/v0/b/${config.storageBucket}/o/${defaultCoverImage}?alt=media`,\n          userId: userId\n        });\n      }\n    });\n};\n\n// export const authenticateFaceBook = () => (dispatch) => {\n//   dispatch({type: LOADING_UI})\n//   const provider = new firebase.auth.FacebookAuthProvider()\n//   let scope = [\"user_birthday\"]\n//   dispatch(multiAuth(provider,scope))\n\n// }\n\nexport const authenticateGithub = () => (dispatch) => {\n  dispatch({ type: LOADING_UI });\n  const provider = new firebase.auth.GithubAuthProvider();\n  let scope = [\"repo\"];\n  // let email = \"email\"\n  dispatch(multiAuth(provider, scope));\n};\n\nexport const googleSignup = (userData, userId) => (dispatch) => {\n  dispatch({ type: LOADING_UI });\n  axios\n    .post(`/google/${userId}`, userData)\n    .then((res) => {\n      if (res.data) {\n        return;\n      }\n    })\n    .catch((err) => {\n      dispatch({\n        type: SET_ERRORS,\n        payload: err,\n      });\n    });\n};\n\nexport const loginUser = (userData) => (dispatch) => {\n  dispatch({ type: LOADING_UI });\n  axios\n    .post(\"/login\", userData)\n    .then(() => {\n      dispatch(login(userData.email, userData.password));\n    })\n    .catch((err) => {\n      dispatch({\n        type: SET_ERRORS,\n        payload: err.response.data,\n      });\n    });\n};\n\nexport const signupUser = (newUserData) => (dispatch) => {\n  dispatch({ type: LOADING_UI });\n  axios\n    .post(\"/signup\", newUserData)\n    .then(() => {\n      dispatch(login(newUserData.email, newUserData.password));\n    })\n    .catch((err) => {\n      dispatch({\n        type: SET_ERRORS,\n        payload: err.response.data,\n      });\n    });\n};\n\nexport const setAuthenticatedUser = (user) => {\n  return {\n    type: SET_AUTHENTICATED,\n    payload: user,\n  };\n};\n\nexport const getCurrentUser = (email) => (dispatch) => {\n  dispatch({ type: LOADING_UI });\n  axios\n    .get(`/user/${email}`)\n    .then((user) => {\n      if (user) {\n        dispatch({ type: SET_USER, payload: user.data });\n      }\n    })\n    .then(() => {\n      dispatch({ type: STOP_LOADING_UI });\n    })\n    .catch((err) => {\n      console.log(err);\n    });\n};\n\nexport const setCurrentChannel = (channel) => (dispatch) => {\n  dispatch({\n    type: SET_CURRENT_CHANNEL,\n    payload: {\n      currentChannel: channel,\n    },\n  });\n};\n"]},"metadata":{},"sourceType":"module"}