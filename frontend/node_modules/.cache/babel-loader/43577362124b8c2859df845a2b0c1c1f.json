{"ast":null,"code":"var _jsxFileName = \"/home/alexkhan/Documents/meet-friends/frontend/src/components/messages/Messages.js\";\nimport React, { Component, Fragment } from 'react';\nimport { Segment, Comment } from \"semantic-ui-react\";\nimport MessagesHeader from \"./messageHeader\";\nimport MessageForm from \"./messageForm\";\nimport firebase from \"../../Auth/firebase\";\nimport Message from \"./Message\";\nimport Spinner from \"../spinner/spinner\";\n\nclass Messages extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      messagesRef: firebase.database().ref('messages'),\n      channel: this.props.currentChannel,\n      currentUser: this.props.currentUser,\n      messages: [],\n      loading: true,\n      numUniqueUsers: \"\",\n      searchTerm: \"\",\n      searchLoading: false\n    };\n\n    this.addListeners = channelId => {\n      this.addMessageListener(channelId);\n    };\n\n    this.addMessageListener = channelId => {\n      let loadedMessages = [];\n      this.state.messagesRef.child(channelId).on(\"child_added\", snap => {\n        loadedMessages.push(snap.val());\n        this.setState({\n          messages: loadedMessages,\n          loading: false\n        });\n      });\n      this.countUniqueUsers(loadedMessages);\n    };\n\n    this.countUniqueUsers = messages => {\n      const uniqueUsers = messages.reduce((acc, message) => {\n        if (!acc.includes(message.user.name)) {\n          acc.push(message.user.username);\n        }\n\n        return acc;\n      }, []);\n      const numUniqueUsers = `${uniqueUsers.length} user${uniqueUsers.length > 1 ? \"s\" : \"\"}`;\n      this.setState({\n        numUniqueUsers: numUniqueUsers\n      });\n    };\n\n    this.displayMessages = messages => messages.length > 0 ? messages.map(message => /*#__PURE__*/React.createElement(Message, {\n      key: message.timestamp,\n      message: message,\n      user: this.state.currentUser,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }\n    })) : /*#__PURE__*/React.createElement(Spinner, {\n      messages: messages,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 12\n      }\n    });\n\n    this.displayChannelName = channel => channel ? `${channel.name}` : \"\";\n\n    this.handleSearch = event => {\n      this.setState({\n        searchTerm: event.target.value,\n        searchLoading: true\n      }, () => {\n        this.handleSearchMessages();\n      });\n    };\n\n    this.handleSearchMessages = () => {\n      const channelsMessages = [...this.state.messages];\n      const regex = new RegExp(this.state.searchTerm, 'gi');\n      const searchResults = channelMessages.reduce((acc, message) => {}, []);\n    };\n  }\n\n  componentDidMount() {\n    const {\n      channel,\n      currentUser\n    } = this.state;\n\n    if (channel && currentUser) {\n      this.addListeners(channel.id);\n    }\n  }\n\n  render() {\n    const {\n      messagesRef,\n      channel,\n      currentUser,\n      messages,\n      numUniqueUsers\n    } = this.state;\n    return /*#__PURE__*/React.createElement(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(MessagesHeader, {\n      handleSearch: this.handleSearch,\n      channelName: this.displayChannelName(channel),\n      numUniqueUsers: numUniqueUsers,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 16\n      }\n    }), /*#__PURE__*/React.createElement(Segment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Comment.Group, {\n      className: \"messages\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 29\n      }\n    }, this.displayMessages(messages))), /*#__PURE__*/React.createElement(MessageForm, {\n      messagesRef: messagesRef,\n      currentChannel: channel,\n      currentUser: currentUser,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 25\n      }\n    }));\n  }\n\n}\n\nexport default Messages;","map":{"version":3,"sources":["/home/alexkhan/Documents/meet-friends/frontend/src/components/messages/Messages.js"],"names":["React","Component","Fragment","Segment","Comment","MessagesHeader","MessageForm","firebase","Message","Spinner","Messages","state","messagesRef","database","ref","channel","props","currentChannel","currentUser","messages","loading","numUniqueUsers","searchTerm","searchLoading","addListeners","channelId","addMessageListener","loadedMessages","child","on","snap","push","val","setState","countUniqueUsers","uniqueUsers","reduce","acc","message","includes","user","name","username","length","displayMessages","map","timestamp","displayChannelName","handleSearch","event","target","value","handleSearchMessages","channelsMessages","regex","RegExp","searchResults","channelMessages","componentDidMount","id","render"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react'\nimport { Segment, Comment } from \"semantic-ui-react\"\nimport MessagesHeader from \"./messageHeader\"\nimport MessageForm from \"./messageForm\"\nimport firebase from \"../../Auth/firebase\"\nimport Message from \"./Message\"\nimport Spinner from \"../spinner/spinner\"\n\nclass Messages extends Component {\n\n    state = {\n        messagesRef: firebase.database().ref('messages'),\n        channel: this.props.currentChannel,\n        currentUser: this.props.currentUser,\n        messages: [],\n        loading: true,\n        numUniqueUsers: \"\",\n        searchTerm: \"\",\n        searchLoading: false\n    }\n\n    componentDidMount() {\n        const { channel, currentUser } = this.state\n        if (channel && currentUser) {\n            this.addListeners(channel.id)\n        }\n    }\n\n    addListeners = (channelId) => {\n        this.addMessageListener(channelId)\n    }\n\n    addMessageListener = (channelId) => {\n        let loadedMessages = []\n        this.state.messagesRef.child(channelId).on(\"child_added\", snap => {\n            loadedMessages.push(snap.val())\n            this.setState({ messages: loadedMessages, loading: false })\n        })\n        this.countUniqueUsers(loadedMessages)\n    }\n\n    countUniqueUsers =(messages)=> {\n        const uniqueUsers = messages.reduce((acc, message)=> {\n            if(!acc.includes(message.user.name)){\n                acc.push(message.user.username)\n            }\n            return acc\n        }, [])\n\n        const numUniqueUsers = `${uniqueUsers.length} user${uniqueUsers.length > 1 ? (\"s\"):(\"\")}`\n        this.setState({numUniqueUsers: numUniqueUsers})\n    }\n\n    displayMessages = (messages) => (\n        messages.length > 0 ? messages.map(message => (\n            <Message\n                key={message.timestamp}\n                message={message}\n                user={this.state.currentUser}\n            />\n        )):<Spinner\n            messages={messages}\n        />\n    )\n\n    displayChannelName = (channel) => channel ? `${channel.name}`: \"\"\n\n    handleSearch = (event) => {\n        this.setState({\n            searchTerm: event.target.value,\n            searchLoading: true\n        },\n        ()=>{\n            this.handleSearchMessages()\n        }\n        )\n    }\n    handleSearchMessages =()=> {\n        const channelsMessages =[...this.state.messages] \n        const regex = new RegExp(this.state.searchTerm, 'gi')\n        const searchResults = channelMessages.reduce((acc, message)=>{\n             \n        },[])\n    }\n\n    render() {\n        const { messagesRef, channel, currentUser, messages,numUniqueUsers } = this.state\n        return (\n            <Fragment>\n               <MessagesHeader\n               handleSearch={this.handleSearch} \n               channelName={this.displayChannelName(channel)}\n               numUniqueUsers={numUniqueUsers}\n               />\n                        <Segment>\n                            <Comment.Group className=\"messages\">\n                                {this.displayMessages(messages)}\n\n                            </Comment.Group>\n                        </Segment>\n                        <MessageForm\n                            messagesRef={messagesRef}\n                            currentChannel={channel}\n                            currentUser={currentUser}\n                        />\n            </Fragment>\n        )\n    }\n}\n\nexport default Messages\n"]},"metadata":{},"sourceType":"module"}