{"ast":null,"code":"var _jsxFileName = \"/home/alexkhan/Documents/meet-friends/frontend/src/components/directMessages/directMessages.js\";\nimport React, { Component } from \"react\";\nimport { Menu, Icon } from \"semantic-ui-react\";\nimport firebase from \"../../Auth/firebase\";\n\nclass directMessages extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      users: this.props.user,\n      userRef: firebase.database().ref(\"users\"),\n      connectedRef: firebase.database().ref(\".info/connected\"),\n      presenceRef: firebase.database().ref(\"presence\")\n    };\n\n    this.addListeners = currentUserUid => {\n      const {\n        userRef,\n        user,\n        connectedRef,\n        presenceRef\n      } = this.state;\n      let loadedUsers = [];\n      userRef.on(\"child_added\", snap => {\n        let user = snap.val();\n        user[\"uid\"] = snap.key;\n        user[\"status\"] = \"offline\";\n        loadedUsers.push(user);\n        this.setState({\n          users: loadedUsers\n        });\n      });\n      connectedRef.on(\"value\", snap => {\n        if (snap.val() === true) {\n          const ref = presenceRef.child(currentUserUid);\n          ref.set(true);\n          ref.onDisconnect().remove(err => {\n            if (err !== null) {\n              console.error(err);\n            }\n          });\n        }\n      });\n      presenceRef.on(\"child_added\", snap => {\n        if (currentUserUid !== snap.key) {\n          this.addStatusToUser(snap.key);\n        }\n      });\n      presenceRef.on(\"child_removed\", snap => {\n        if (currentUserUid !== snap.key) {\n          this.addStatusToUser(snap.key);\n        }\n      });\n    };\n\n    this.addStatusToUser = (userId, connected = true) => {\n      const updatedUsers = this.state.users.reduce((acc, user) => {\n        if (user.uid === userId) {\n          user[\"status\"] = `${connected ? \"online\" : \"offline\"}`;\n        }\n\n        return acc.concat(user);\n      }, []);\n      this.setState({\n        users: updatedUsers\n      });\n    };\n  }\n\n  componentDidMount() {\n    if (this.state.user) {\n      this.addListeners(this.state.user.userId);\n    }\n  }\n\n  render() {\n    const {\n      users\n    } = this.state;\n    return /*#__PURE__*/React.createElement(Menu.Menu, {\n      className: \"menu\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Icon, {\n      name: \"mail\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }\n    }), \"DIRECT MESSAGES\"), \" \");\n  }\n\n}\n\nexport default directMessages;","map":{"version":3,"sources":["/home/alexkhan/Documents/meet-friends/frontend/src/components/directMessages/directMessages.js"],"names":["React","Component","Menu","Icon","firebase","directMessages","state","users","props","user","userRef","database","ref","connectedRef","presenceRef","addListeners","currentUserUid","loadedUsers","on","snap","val","key","push","setState","child","set","onDisconnect","remove","err","console","error","addStatusToUser","userId","connected","updatedUsers","reduce","acc","uid","concat","componentDidMount","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Menu, Icon } from \"semantic-ui-react\";\nimport firebase from \"../../Auth/firebase\";\nclass directMessages extends Component {\n  state = {\n    users: this.props.user,\n    userRef: firebase.database().ref(\"users\"),\n    connectedRef: firebase.database().ref(\".info/connected\"),\n    presenceRef: firebase.database().ref(\"presence\"),\n  };\n\n  componentDidMount() {\n    if (this.state.user) {\n      this.addListeners(this.state.user.userId);\n    }\n  }\n  addListeners = (currentUserUid) => {\n    const { userRef, user, connectedRef, presenceRef } = this.state;\n    let loadedUsers = [];\n    userRef.on(\"child_added\", (snap) => {\n      let user = snap.val();\n      user[\"uid\"] = snap.key;\n      user[\"status\"] = \"offline\";\n      loadedUsers.push(user);\n      this.setState({ users: loadedUsers });\n    });\n    connectedRef.on(\"value\", (snap) => {\n      if (snap.val() === true) {\n        const ref = presenceRef.child(currentUserUid);\n        ref.set(true);\n        ref.onDisconnect().remove((err) => {\n          if (err !== null) {\n            console.error(err);\n          }\n        });\n      }\n    });\n\n    presenceRef.on(\"child_added\", (snap) => {\n      if (currentUserUid !== snap.key) {\n          this.addStatusToUser(snap.key)\n      }\n    });\n\n    presenceRef.on(\"child_removed\", (snap) => {\n      if (currentUserUid !== snap.key) {\n          this.addStatusToUser(snap.key)\n      }\n    });\n  };\n\n  addStatusToUser = (userId, connected = true) => {\n    const updatedUsers = this.state.users.reduce((acc, user) => {\n      if (user.uid === userId) {\n        user[\"status\"] = `${connected ? \"online\" : \"offline\"}`;\n      }\n      return acc.concat(user);\n    }, []);\n    this.setState({users: updatedUsers})\n  };\n\n  render() {\n    const { users } = this.state;\n\n    return (\n      <Menu.Menu className=\"menu\">\n        <span>\n          <Icon name=\"mail\" />\n          DIRECT MESSAGES\n        </span>{\" \"}\n        {/* ({users.length }) */}\n      </Menu.Menu>\n    );\n  }\n}\n\nexport default directMessages;\n"]},"metadata":{},"sourceType":"module"}