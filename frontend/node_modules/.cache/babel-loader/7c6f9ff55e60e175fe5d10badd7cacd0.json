{"ast":null,"code":"import { LOADING_UI, SET_ERRORS, SET_AUTHENTICATED, SET_USER, STOP_LOADING_UI, SET_CURRENT_CHANNEL } from \"../store/types\";\nimport firebase from \"../../Auth/firebase\";\nimport axios from \"axios\";\nimport jwt_decode from \"jwt-decode\";\nimport config from \"../../config/config\";\nimport React from \"react\";\nexport const login = (email, password) => (dispatch, next) => {\n  firebase.auth().signInWithEmailAndPassword(email, password).then(data => {\n    if (data) {\n      const {\n        email\n      } = data.user;\n      dispatch(registerUser(data));\n    }\n  }).catch(err => {\n    dispatch({\n      type: SET_ERRORS,\n      payload: err\n    });\n  });\n};\nexport const multiAuth = (provider, scope) => dispatch => {\n  provider.addScope(`${scope[0]}`);\n  if (scope[1]) provider.addScope(`${scope[1]}`);\n  firebase.auth().signInWithPopup(provider).then(result => {\n    if (result.credential) {\n      const {\n        user\n      } = result;\n      let token;\n      const {\n        displayName,\n        email,\n        xa\n      } = user;\n      token = xa;\n      const {\n        picture,\n        user_id\n      } = jwt_decode(token);\n      const userData = {\n        email: email,\n        username: displayName,\n        profileImage: picture\n      };\n      dispatch(googleSignup(userData, user_id));\n      dispatch(registerUser(result));\n    }\n  }).catch(err => {\n    dispatch({\n      type: SET_ERRORS,\n      payload: err\n    });\n  });\n};\nexport const authenticateGoogle = () => dispatch => {\n  dispatch({\n    type: LOADING_UI\n  });\n  const provider = new firebase.auth.GoogleAuthProvider();\n  let scope = [\"profile\", \"email\"];\n  dispatch(multiAuth(provider, scope));\n};\nexport const registerUser = createdUser => {\n  const defaultProfileImage = \"profile.png\";\n  const defaultCoverImage = \"download.png\";\n  const userId = firebase.auth().currentUser.uid;\n  console.log(userId);\n  const regUser = firebase.database().ref(\"users\");\n  const userRef = firebase.database().ref(\"/users/\" + userId).once(\"value\").then(snapshot => {\n    console.log(snapshot.val());\n\n    if (snapshot.val() !== null) {\n      return {\n        type: SET_ERRORS,\n        payload: {\n          email: `${snapshot.val().email} exists`\n        }\n      };\n    } else {\n      console.log(createdUser);\n      return regUser.child(createdUser.user.uid).set({\n        email: createdUser.user.email,\n        username: createdUser.user.displayName,\n        profileImage: createdUser.user.photoURL,\n        coverImage: `https://firebasestorage.googleapis.com/v0/b/${config.storageBucket}/o/${defaultCoverImage}?alt=media`,\n        userId: userId\n      });\n    }\n  });\n}; // export const authenticateFaceBook = () => (dispatch) => {\n//   dispatch({type: LOADING_UI})\n//   const provider = new firebase.auth.FacebookAuthProvider()\n//   let scope = [\"user_birthday\"]\n//   dispatch(multiAuth(provider,scope))\n// }\n\nexport const authenticateGithub = () => dispatch => {\n  dispatch({\n    type: LOADING_UI\n  });\n  const provider = new firebase.auth.GithubAuthProvider();\n  let scope = [\"repo\"]; // let email = \"email\"\n\n  dispatch(multiAuth(provider, scope));\n};\nexport const googleSignup = (userData, userId) => dispatch => {\n  dispatch({\n    type: LOADING_UI\n  });\n  axios.post(`/google/${userId}`, userData).then(res => {\n    if (res.data) {\n      return;\n    }\n  }).catch(err => {\n    dispatch({\n      type: SET_ERRORS,\n      payload: err\n    });\n  });\n};\nexport const loginUser = userData => dispatch => {\n  dispatch({\n    type: LOADING_UI\n  });\n  axios.post(\"/login\", userData).then(() => {\n    dispatch(login(userData.email, userData.password));\n  }).catch(err => {\n    dispatch({\n      type: SET_ERRORS,\n      payload: err.response.data\n    });\n  });\n};\nexport const signupUser = newUserData => dispatch => {\n  dispatch({\n    type: LOADING_UI\n  });\n  axios.post(\"/signup\", newUserData).then(() => {\n    dispatch(login(newUserData.email, newUserData.password));\n  }).catch(err => {\n    dispatch({\n      type: SET_ERRORS,\n      payload: err.response.data\n    });\n  });\n};\nexport const setAuthenticatedUser = user => {\n  return {\n    type: SET_AUTHENTICATED,\n    payload: user\n  };\n};\nexport const setCurrentChannel = channel => dispatch => {\n  dispatch({\n    type: SET_CURRENT_CHANNEL,\n    payload: {\n      currentChannel: channel\n    }\n  });\n};","map":{"version":3,"sources":["/home/alexkhan/Documents/meet-friends/frontend/src/redux/actions/actions.js"],"names":["LOADING_UI","SET_ERRORS","SET_AUTHENTICATED","SET_USER","STOP_LOADING_UI","SET_CURRENT_CHANNEL","firebase","axios","jwt_decode","config","React","login","email","password","dispatch","next","auth","signInWithEmailAndPassword","then","data","user","registerUser","catch","err","type","payload","multiAuth","provider","scope","addScope","signInWithPopup","result","credential","token","displayName","xa","picture","user_id","userData","username","profileImage","googleSignup","authenticateGoogle","GoogleAuthProvider","createdUser","defaultProfileImage","defaultCoverImage","userId","currentUser","uid","console","log","regUser","database","ref","userRef","once","snapshot","val","child","set","photoURL","coverImage","storageBucket","authenticateGithub","GithubAuthProvider","post","res","loginUser","response","signupUser","newUserData","setAuthenticatedUser","setCurrentChannel","channel","currentChannel"],"mappings":"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","sourcesContent":["import {\n  LOADING_UI,\n  SET_ERRORS,\n  SET_AUTHENTICATED,\n  SET_USER,\n  STOP_LOADING_UI,\n  SET_CURRENT_CHANNEL,\n} from \"../store/types\";\nimport firebase from \"../../Auth/firebase\";\nimport axios from \"axios\";\nimport jwt_decode from \"jwt-decode\";\nimport config from \"../../config/config\";\nimport React from \"react\"\n\nexport const login = (email, password) => (dispatch, next) => {\n  firebase\n    .auth()\n    .signInWithEmailAndPassword(email, password)\n    .then((data) => {\n      if (data) {\n        const { email } = data.user;\n        dispatch(registerUser(data))\n        \n      }\n    })\n    .catch((err) => {\n      dispatch({\n        type: SET_ERRORS,\n        payload: err,\n      });\n    });\n};\n\n\nexport const multiAuth = (provider, scope) => (dispatch) => {\n  provider.addScope(`${scope[0]}`);\n  if (scope[1]) provider.addScope(`${scope[1]}`);\n  firebase\n    .auth()\n    .signInWithPopup(provider)\n    .then((result) => {\n      if (result.credential) {\n        const { user } = result;\n        let token;\n        const { displayName, email, xa } = user;\n        token = xa;\n        const { picture, user_id } = jwt_decode(token);\n\n        const userData = {\n          email: email,\n          username: displayName,\n          profileImage: picture,\n        };\n        dispatch(googleSignup(userData, user_id));\n        dispatch(registerUser(result))\n      }\n    })\n    .catch((err) => {\n      dispatch({\n        type: SET_ERRORS,\n        payload: err,\n      });\n    });\n};\n\nexport const authenticateGoogle = () => (dispatch) => {\n  dispatch({ type: LOADING_UI });\n  const provider = new firebase.auth.GoogleAuthProvider();\n  let scope = [\"profile\", \"email\"];\n  dispatch(multiAuth(provider, scope));\n};\n\nexport const registerUser = (createdUser) => {\n  const defaultProfileImage = \"profile.png\";\n  const defaultCoverImage = \"download.png\";\n  const userId = firebase.auth().currentUser.uid;\n  console.log(userId)\n  const regUser = firebase.database().ref(\"users\");\n  const userRef = firebase\n    .database()\n    .ref(\"/users/\" + userId)\n    .once(\"value\")\n    .then((snapshot) => {\n      console.log(snapshot.val())\n      if (snapshot.val() !== null) {\n\n        return {\n          type: SET_ERRORS,\n          payload: { email: `${snapshot.val().email} exists` },\n        };\n      } else {\n        console.log(createdUser)\n        return regUser.child(createdUser.user.uid).set({\n          email: createdUser.user.email,\n          username: createdUser.user.displayName,\n          profileImage: createdUser.user.photoURL,\n          coverImage: `https://firebasestorage.googleapis.com/v0/b/${config.storageBucket}/o/${defaultCoverImage}?alt=media`,\n          userId: userId\n        });\n      }\n    });\n};\n\n// export const authenticateFaceBook = () => (dispatch) => {\n//   dispatch({type: LOADING_UI})\n//   const provider = new firebase.auth.FacebookAuthProvider()\n//   let scope = [\"user_birthday\"]\n//   dispatch(multiAuth(provider,scope))\n\n// }\n\nexport const authenticateGithub = () => (dispatch) => {\n  dispatch({ type: LOADING_UI });\n  const provider = new firebase.auth.GithubAuthProvider();\n  let scope = [\"repo\"];\n  // let email = \"email\"\n  dispatch(multiAuth(provider, scope));\n};\n\nexport const googleSignup = (userData, userId) => (dispatch) => {\n  dispatch({ type: LOADING_UI });\n  axios\n    .post(`/google/${userId}`, userData)\n    .then((res) => {\n      if (res.data) {\n        return;\n      }\n    })\n    .catch((err) => {\n      dispatch({\n        type: SET_ERRORS,\n        payload: err,\n      });\n    });\n};\n\nexport const loginUser = (userData) => (dispatch) => {\n  dispatch({ type: LOADING_UI });\n  axios\n    .post(\"/login\", userData)\n    .then(() => {\n      dispatch(login(userData.email, userData.password));\n    })\n    .catch((err) => {\n      dispatch({\n        type: SET_ERRORS,\n        payload: err.response.data,\n      });\n    });\n};\n\nexport const signupUser = (newUserData) => (dispatch) => {\n  dispatch({ type: LOADING_UI });\n  axios\n    .post(\"/signup\", newUserData)\n    .then(() => {\n      dispatch(login(newUserData.email, newUserData.password));\n      \n    })\n    .catch((err) => {\n      dispatch({\n        type: SET_ERRORS,\n        payload: err.response.data,\n      });\n    });\n};\n\nexport const setAuthenticatedUser = (user) => {\n  return {\n    type: SET_AUTHENTICATED,\n    payload: user,\n  };\n};\n\n\n\nexport const setCurrentChannel = (channel) => (dispatch) => {\n  dispatch({\n    type: SET_CURRENT_CHANNEL,\n    payload: {\n      currentChannel: channel,\n    },\n  });\n};\n"]},"metadata":{},"sourceType":"module"}