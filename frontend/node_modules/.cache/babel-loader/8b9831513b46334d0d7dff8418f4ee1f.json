{"ast":null,"code":"var _jsxFileName = \"/home/alexkhan/Documents/meet-friends/frontend/src/components/messages/messageForm.js\";\nimport React, { Component } from 'react';\nimport { Segment, Button, Input } from \"semantic-ui-react\";\nimport firebase from \"../../Auth/firebase\";\nimport FileModal from \"./fileModal\";\nimport uuidv4 from \"uuid/v4\";\n\nclass messageForm extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      storageRef: firebase.storage().ref(),\n      uploadState: \"\",\n      uploadTask: null,\n      message: \"\",\n      loading: false,\n      channel: this.props.currentChannel,\n      user: this.props.currentUser,\n      messagesRef: this.props.messagesRef,\n      errors: [],\n      modal: false\n    };\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.createMessage = () => {\n      const {\n        user\n      } = this.state;\n      const message = {\n        timestamp: firebase.database.ServerValue.TIMESTAMP,\n        user: {\n          id: user.userId,\n          name: user.username,\n          avatar: user.profileImage\n        },\n        content: this.state.message\n      };\n      return message;\n    };\n\n    this.openModal = () => this.setState({\n      modal: true\n    });\n\n    this.closeModal = () => this.setState({\n      modal: false\n    });\n\n    this.uploadFile = (file, metadata) => {\n      const pathToUpload = this.state.channel.id;\n      const ref = this.props.messagesRef;\n      const filePath = `chat/public/${uuidv4()}.jpg`;\n      this.setState({\n        uploadState: \"uploading\",\n        uploadTask: this.state.storageRef.child(filePath).put(file, metadata)\n      }, () => {\n        this.state.uploadTask.on('state_changed', snap => {\n          const percentUploaded = Math.round(snap.bytesTransferred / snap.totalBytes * 100);\n        });\n        this.setState({\n          percentUploaded: per\n        });\n      });\n    };\n\n    this.sendMessage = () => {\n      const {\n        message,\n        channel,\n        messagesRef\n      } = this.state;\n\n      if (message) {\n        this.setState({\n          loading: true\n        });\n        messagesRef.child(channel.id).push().set(this.createMessage()).then(() => {\n          this.setState({\n            loading: false,\n            message: \"\",\n            errors: []\n          });\n        }).catch(error => {\n          console.error(error);\n          this.setState({\n            loading: false,\n            errors: this.state.errors.concat(error)\n          });\n        });\n      } else {\n        this.setState({\n          errors: this.state.errors.concat({\n            message: 'Add a message'\n          })\n        });\n      }\n    };\n  }\n\n  render() {\n    const {\n      errors,\n      message,\n      loading,\n      modal\n    } = this.state;\n    return /*#__PURE__*/React.createElement(Segment, {\n      className: \"message__form\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      fluid: true,\n      name: \"message\",\n      style: {\n        marginBottom: '0.7em'\n      },\n      label: /*#__PURE__*/React.createElement(Button, {\n        icon: 'add',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 28\n        }\n      }),\n      value: message,\n      labelPosition: \"left\",\n      placeholder: \"Write your message\",\n      onChange: this.handleChange,\n      className: errors.some(error => error.message.includes('message')) ? 'error' : '',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Button.Group, {\n      icon: true,\n      widths: \"2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      color: \"orange\",\n      content: \"Add Reply\",\n      labelPosition: \"left\",\n      icon: \"edit\",\n      onClick: this.sendMessage,\n      disabled: loading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(FileModal, {\n      modal: modal,\n      closeModal: this.closeModal,\n      uploadFile: this.uploadFile,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      color: \"teal\",\n      content: \"Upload Media\",\n      labelPosition: \"right\",\n      icon: \"cloud upload\",\n      onClick: this.openModal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 21\n      }\n    })));\n  }\n\n}\n\nexport default messageForm;","map":{"version":3,"sources":["/home/alexkhan/Documents/meet-friends/frontend/src/components/messages/messageForm.js"],"names":["React","Component","Segment","Button","Input","firebase","FileModal","uuidv4","messageForm","state","storageRef","storage","ref","uploadState","uploadTask","message","loading","channel","props","currentChannel","user","currentUser","messagesRef","errors","modal","handleChange","event","setState","target","name","value","createMessage","timestamp","database","ServerValue","TIMESTAMP","id","userId","username","avatar","profileImage","content","openModal","closeModal","uploadFile","file","metadata","pathToUpload","filePath","child","put","on","snap","percentUploaded","Math","round","bytesTransferred","totalBytes","per","sendMessage","push","set","then","catch","error","console","concat","render","marginBottom","some","includes"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { Segment, Button, Input } from \"semantic-ui-react\"\nimport firebase from \"../../Auth/firebase\"\nimport FileModal from \"./fileModal\"\nimport uuidv4 from \"uuid/v4\"\n\nclass messageForm extends Component {\n    state = {\n        storageRef: firebase.storage().ref(),\n        uploadState: \"\",\n        uploadTask: null,\n        message: \"\",\n        loading: false,\n        channel: this.props.currentChannel,\n        user: this.props.currentUser,\n        messagesRef: this.props.messagesRef,\n        errors: [],\n        modal: false\n    }\n    handleChange = (event) => {\n        this.setState({ [event.target.name]: event.target.value })\n    }\n\n    createMessage = () => {\n        const { user } = this.state\n        const message = {\n            timestamp: firebase.database.ServerValue.TIMESTAMP,\n            user: {\n                id: user.userId,\n                name: user.username,\n                avatar: user.profileImage\n            },\n            content: this.state.message\n        }\n        return message\n    }\n\n    openModal = () => this.setState({ modal: true })\n    closeModal = () => this.setState({ modal: false })\n\n\n\n    uploadFile = (file, metadata) => {\n        const pathToUpload = this.state.channel.id\n        const ref = this.props.messagesRef\n        const filePath = `chat/public/${uuidv4()}.jpg` \n\n        this.setState({\n            uploadState: \"uploading\",\n            uploadTask: this.state.storageRef.child(filePath).put(file, metadata)\n        },\n        ()=> {\n            this.state.uploadTask.on('state_changed', snap=> {\n                const percentUploaded = Math.round((snap.bytesTransferred/snap.totalBytes) *100)\n            })\n            this.setState({percentUploaded: per})\n        }\n        )\n\n    };\n\n\n\n    sendMessage = () => {\n        const { message, channel, messagesRef } = this.state\n        if (message) {\n            this.setState({ loading: true })\n            messagesRef.child(channel.id).push().set(this.createMessage())\n                .then(() => {\n                    this.setState({ loading: false, message: \"\", errors: [] })\n                }).catch((error) => {\n                    console.error(error)\n                    this.setState({\n                        loading: false,\n                        errors: this.state.errors.concat(error)\n                    })\n                })\n\n        } else {\n            this.setState({\n                errors: this.state.errors.concat({ message: 'Add a message' })\n            })\n        }\n    }\n\n    render() {\n        const { errors, message, loading, modal } = this.state\n        return (\n            <Segment className=\"message__form\">\n                <Input fluid name=\"message\" style={{ marginBottom: '0.7em' }}\n                    label={<Button icon={'add'} />}\n                    value={message}\n                    labelPosition=\"left\"\n                    placeholder=\"Write your message\"\n                    onChange={this.handleChange}\n                    className={\n                        errors.some(error => error.message.includes('message')) ? 'error' : ''\n                    }\n\n                />\n                <Button.Group icon widths=\"2\">\n                    <Button\n                        color=\"orange\"\n                        content=\"Add Reply\"\n                        labelPosition=\"left\"\n                        icon=\"edit\"\n                        onClick={this.sendMessage}\n                        disabled={loading}\n                    />\n                    <FileModal\n                        modal={modal}\n                        closeModal={this.closeModal}\n                        uploadFile={this.uploadFile}\n\n                    />\n                    <Button\n                        color=\"teal\"\n                        content=\"Upload Media\"\n                        labelPosition=\"right\"\n                        icon=\"cloud upload\"\n                        onClick={this.openModal}\n\n                    />\n                </Button.Group>\n            </Segment>\n        )\n    }\n}\n\nexport default messageForm\n"]},"metadata":{},"sourceType":"module"}