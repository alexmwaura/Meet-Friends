{"ast":null,"code":"var _jsxFileName = \"/home/alexkhan/Documents/meet-friends/frontend/src/components/messages/Messages.js\";\nimport React, { Component, Fragment } from 'react';\nimport { Segment, Comment } from \"semantic-ui-react\";\nimport MessagesHeader from \"./messageHeader\";\nimport MessageForm from \"./messageForm\";\nimport firebase from \"../../Auth/firebase\";\nimport Message from \"./Message\";\nimport Spinner from \"../spinner/spinner\";\n\nclass Messages extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      messagesRef: firebase.database().ref('messages'),\n      channel: this.props.currentChannel,\n      currentUser: this.props.currentUser,\n      messages: [],\n      loading: true\n    };\n\n    this.addListeners = channelId => {\n      this.addMessageListener(channelId);\n    };\n\n    this.addMessageListener = channelId => {\n      let loadedMessages = [];\n      this.state.messagesRef.child(channelId).on(\"child_added\", snap => {\n        loadedMessages.push(snap.val());\n        this.setState({\n          messages: loadedMessages,\n          loading: false\n        });\n      });\n    };\n\n    this.displayMessages = messages => messages.length > 0 && messages.map(message => /*#__PURE__*/React.createElement(Message, {\n      key: message.timestamp,\n      message: message,\n      user: this.state.currentUser,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 13\n      }\n    }));\n  }\n\n  componentDidMount() {\n    const {\n      channel,\n      currentUser\n    } = this.state;\n\n    if (channel && currentUser) {\n      this.addListeners(channel.id);\n    }\n  }\n\n  render() {\n    const {\n      messagesRef,\n      channel,\n      currentUser,\n      messages\n    } = this.state;\n    return /*#__PURE__*/React.createElement(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 13\n      }\n    }, messages.length > 0 ? /*#__PURE__*/React.createElement(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(MessagesHeader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(Segment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Comment.Group, {\n      className: \"messages\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 29\n      }\n    }, this.displayMessages(messages))), /*#__PURE__*/React.createElement(MessageForm, {\n      messagesRef: messagesRef,\n      currentChannel: channel,\n      currentUser: currentUser,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 25\n      }\n    })) : /*#__PURE__*/React.createElement(Spinner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 22\n      }\n    }));\n  }\n\n}\n\nexport default Messages;","map":{"version":3,"sources":["/home/alexkhan/Documents/meet-friends/frontend/src/components/messages/Messages.js"],"names":["React","Component","Fragment","Segment","Comment","MessagesHeader","MessageForm","firebase","Message","Spinner","Messages","state","messagesRef","database","ref","channel","props","currentChannel","currentUser","messages","loading","addListeners","channelId","addMessageListener","loadedMessages","child","on","snap","push","val","setState","displayMessages","length","map","message","timestamp","componentDidMount","id","render"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react'\nimport { Segment, Comment } from \"semantic-ui-react\"\nimport MessagesHeader from \"./messageHeader\"\nimport MessageForm from \"./messageForm\"\nimport firebase from \"../../Auth/firebase\"\nimport Message from \"./Message\"\nimport Spinner from \"../spinner/spinner\"\n\nclass Messages extends Component {\n\n    state = {\n        messagesRef: firebase.database().ref('messages'),\n        channel: this.props.currentChannel,\n        currentUser: this.props.currentUser,\n        messages: [],\n        loading: true\n    }\n\n    componentDidMount() {\n        const { channel, currentUser } = this.state\n        if (channel && currentUser) {\n            this.addListeners(channel.id)\n        }\n    }\n\n    addListeners = (channelId) => {\n        this.addMessageListener(channelId)\n    }\n\n    addMessageListener = (channelId) => {\n        let loadedMessages = []\n        this.state.messagesRef.child(channelId).on(\"child_added\", snap => {\n            loadedMessages.push(snap.val())\n            this.setState({ messages: loadedMessages, loading: false })\n        })\n    }\n\n    displayMessages = (messages) => (\n        messages.length > 0 && messages.map(message => (\n            <Message\n                key={message.timestamp}\n                message={message}\n                user={this.state.currentUser}\n            />\n        ))\n    )\n\n\n    render() {\n        const { messagesRef, channel, currentUser, messages } = this.state\n        return (\n            <Fragment>\n                {messages.length > 0 ? (\n                    <Fragment>\n                        <MessagesHeader />\n                        <Segment>\n                            <Comment.Group className=\"messages\">\n                                {this.displayMessages(messages)}\n\n                            </Comment.Group>\n                        </Segment>\n                        <MessageForm\n                            messagesRef={messagesRef}\n                            currentChannel={channel}\n                            currentUser={currentUser}\n                        />\n                    </Fragment>\n                ) : (<Spinner />)}\n            </Fragment>\n        )\n    }\n}\n\nexport default Messages\n"]},"metadata":{},"sourceType":"module"}