{"ast":null,"code":"var _jsxFileName = \"/home/alexkhan/Documents/meet-friends/frontend/src/index.js\";\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { BrowserRouter as Router, Route, Switch, withRouter } from \"react-router-dom\";\nimport login from './pages/login/login';\nimport { Provider, connect } from \"react-redux\";\nimport AuthRoute from \"./Auth/AuthRoute\";\nimport store from \"./redux/store/store\";\nimport firebase from \"./Auth/firebase\";\nimport * as serviceWorker from './serviceWorker';\nimport { SET_AUTHENTICATED, SET_UNAUTHENTICATED, STOP_LOADING_UI } from './redux/store/types';\nimport axios from \"axios\";\nimport jwt_decode from \"jwt-decode\";\nimport { setAuthenticatedUser, getCurrentUser } from './redux/actions/userActions';\n\nclass Root extends Component {\n  setToken(token, email) {\n    if (token) {\n      axios.defaults.headers.common[\"Authorization\"] = token;\n      console.log(token);\n      this.props.getCurrentUser(email);\n    }\n  }\n\n  componentDidMount() {\n    firebase.auth().onAuthStateChanged(user => {\n      if (user) {\n        const {\n          xa,\n          uid,\n          email\n        } = user;\n        const token = `Bearer ${xa}`;\n        this.setToken(token, email);\n        this.props.setAuthenticatedUser(user);\n        store.dispatch({\n          type: STOP_LOADING_UI\n        });\n        console.log(user);\n        this.props.history.push(\"/\");\n\n        if (jwt_decode(xa)['exp'] * 1000 < Date.now()) {\n          store.dispatch({\n            type: SET_UNAUTHENTICATED\n          });\n          this.props.history.push(\"/login\");\n        }\n      } else {\n        this.props.history.push('/login');\n      }\n    });\n  }\n\n  render() {\n    console.log(this.props);\n    return /*#__PURE__*/React.createElement(Switch, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 10\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      exact: true,\n      path: \"/login\",\n      component: login,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 12\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      exact: true,\n      path: \"/\",\n      component: App,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 12\n      }\n    }));\n  }\n\n}\n\nmapStateToFromProps = state => {\n  UI;\n};\n\nconst RootWithAuth = withRouter(connect(null, {\n  setAuthenticatedUser,\n  getCurrentUser\n})(Root));\nReactDOM.render( /*#__PURE__*/React.createElement(Provider, {\n  store: store,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(Router, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 2\n  }\n}, /*#__PURE__*/React.createElement(RootWithAuth, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 4\n  }\n}))), document.getElementById('root'));\nserviceWorker.register();","map":{"version":3,"sources":["/home/alexkhan/Documents/meet-friends/frontend/src/index.js"],"names":["React","Component","ReactDOM","App","BrowserRouter","Router","Route","Switch","withRouter","login","Provider","connect","AuthRoute","store","firebase","serviceWorker","SET_AUTHENTICATED","SET_UNAUTHENTICATED","STOP_LOADING_UI","axios","jwt_decode","setAuthenticatedUser","getCurrentUser","Root","setToken","token","email","defaults","headers","common","console","log","props","componentDidMount","auth","onAuthStateChanged","user","xa","uid","dispatch","type","history","push","Date","now","render","mapStateToFromProps","state","UI","RootWithAuth","document","getElementById","register"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,SAASC,aAAa,IAAIC,MAA1B,EAAkCC,KAAlC,EAAyCC,MAAzC,EAAiDC,UAAjD,QAAmE,kBAAnE;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,SAAQC,QAAR,EAAiBC,OAAjB,QAA+B,aAA/B;AACA,OAAOC,SAAP,MAAuB,kBAAvB;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,OAAOC,QAAP,MAAqB,iBAArB;AACA,OAAO,KAAKC,aAAZ,MAA+B,iBAA/B;AACA,SAASC,iBAAT,EAA4BC,mBAA5B,EAAiDC,eAAjD,QAAwE,qBAAxE;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAAQC,oBAAR,EAA6BC,cAA7B,QAAkD,6BAAlD;;AAEA,MAAMC,IAAN,SAAmBtB,SAAnB,CAA6B;AAE3BuB,EAAAA,QAAQ,CAACC,KAAD,EAAOC,KAAP,EAAa;AACnB,QAAGD,KAAH,EAAS;AACPN,MAAAA,KAAK,CAACQ,QAAN,CAAeC,OAAf,CAAuBC,MAAvB,CAA8B,eAA9B,IAAiDJ,KAAjD;AACAK,MAAAA,OAAO,CAACC,GAAR,CAAYN,KAAZ;AACA,WAAKO,KAAL,CAAWV,cAAX,CAA0BI,KAA1B;AACD;AACF;;AAEDO,EAAAA,iBAAiB,GAAE;AACjBnB,IAAAA,QAAQ,CAACoB,IAAT,GAAgBC,kBAAhB,CAAmCC,IAAI,IAAG;AACxC,UAAGA,IAAH,EAAQ;AACN,cAAM;AAACC,UAAAA,EAAD;AAAIC,UAAAA,GAAJ;AAAQZ,UAAAA;AAAR,YAAiBU,IAAvB;AACA,cAAMX,KAAK,GAAI,UAASY,EAAG,EAA3B;AACA,aAAKb,QAAL,CAAcC,KAAd,EAAoBC,KAApB;AACA,aAAKM,KAAL,CAAWX,oBAAX,CAAgCe,IAAhC;AAEAvB,QAAAA,KAAK,CAAC0B,QAAN,CAAe;AAACC,UAAAA,IAAI,EAACtB;AAAN,SAAf;AACAY,QAAAA,OAAO,CAACC,GAAR,CAAYK,IAAZ;AACA,aAAKJ,KAAL,CAAWS,OAAX,CAAmBC,IAAnB,CAAwB,GAAxB;;AAID,YAAGtB,UAAU,CAACiB,EAAD,CAAV,CAAe,KAAf,IAAwB,IAAxB,GAA+BM,IAAI,CAACC,GAAL,EAAlC,EAA6C;AAC3C/B,UAAAA,KAAK,CAAC0B,QAAN,CAAe;AAACC,YAAAA,IAAI,EAAEvB;AAAP,WAAf;AACA,eAAKe,KAAL,CAAWS,OAAX,CAAmBC,IAAnB,CAAwB,QAAxB;AACD;AACD,OAhBD,MAiBI;AACJ,aAAKV,KAAL,CAAWS,OAAX,CAAmBC,IAAnB,CAAyB,QAAzB;AAEC;AAEF,KAvBD;AAyBD;;AAEDG,EAAAA,MAAM,GAAE;AACNf,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAjB;AACA,wBAGK,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,KAAD;AAAO,MAAA,KAAK,MAAZ;AAAa,MAAA,IAAI,EAAC,QAAlB;AAA2B,MAAA,SAAS,EAAEvB,KAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAEE,oBAAC,KAAD;AAAO,MAAA,KAAK,MAAZ;AAAa,MAAA,IAAI,EAAC,GAAlB;AAAsB,MAAA,SAAS,EAAEN,GAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CAHL;AAUD;;AAlD0B;;AAqD7B2C,mBAAmB,GAAGC,KAAK,IAAI;AAC7BC,EAAAA,EAAE;AACH,CAFD;;AAIA,MAAMC,YAAY,GAAGzC,UAAU,CAACG,OAAO,CAAC,IAAD,EAAO;AAACU,EAAAA,oBAAD;AAAsBC,EAAAA;AAAtB,CAAP,CAAP,CAAqDC,IAArD,CAAD,CAA/B;AAGArB,QAAQ,CAAC2C,MAAT,eACE,oBAAC,QAAD;AAAU,EAAA,KAAK,EAAEhC,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACD,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,CADC,CADF,EAOEqC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAPF;AASApC,aAAa,CAACqC,QAAd","sourcesContent":["import React, {Component} from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { BrowserRouter as Router, Route, Switch, withRouter } from \"react-router-dom\";\nimport login from './pages/login/login'\nimport {Provider,connect} from \"react-redux\"\nimport AuthRoute from  \"./Auth/AuthRoute\"\nimport store from \"./redux/store/store\"\nimport firebase from \"./Auth/firebase\"\nimport * as serviceWorker from './serviceWorker';\nimport { SET_AUTHENTICATED, SET_UNAUTHENTICATED, STOP_LOADING_UI } from './redux/store/types';\nimport axios from \"axios\"\nimport jwt_decode from \"jwt-decode\"\nimport {setAuthenticatedUser,getCurrentUser} from './redux/actions/userActions'\n\nclass Root extends Component {\n\n  setToken(token,email){\n    if(token){\n      axios.defaults.headers.common[\"Authorization\"] = token\n      console.log(token)\n      this.props.getCurrentUser(email)\n    }\n  }\n\n  componentDidMount(){\n    firebase.auth().onAuthStateChanged(user=> {\n      if(user){\n        const {xa,uid,email} = user\n        const token = `Bearer ${xa}`\n        this.setToken(token,email)\n        this.props.setAuthenticatedUser(user)\n        \n        store.dispatch({type:STOP_LOADING_UI})\n        console.log(user)\n        this.props.history.push(\"/\")\n        \n\n\n       if(jwt_decode(xa)['exp'] * 1000 < Date.now()){ \n         store.dispatch({type: SET_UNAUTHENTICATED})\n         this.props.history.push(\"/login\")\n       }\n      }\n      else{\n      this.props.history.push( '/login')\n\n      }\n      \n    })\n\n  }  \n\n  render(){\n    console.log(this.props)\n    return(\n   \n     \n         <Switch>\n           <Route exact path=\"/login\" component={login} />\n           <Route exact path=\"/\" component={App} />\n         </Switch>\n      \n      \n    )\n  }\n}\n\nmapStateToFromProps = state => {\n  UI\n}\n\nconst RootWithAuth = withRouter(connect(null, {setAuthenticatedUser,getCurrentUser})(Root))\n\n\nReactDOM.render(\n  <Provider store={store}>\n <Router>\n   <RootWithAuth/>\n </Router>\n </Provider>,\n\n  document.getElementById('root')\n);\nserviceWorker.register()\n\n"]},"metadata":{},"sourceType":"module"}