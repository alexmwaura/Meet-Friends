{"ast":null,"code":"import { LOADING_UI, SET_ERRORS, SET_AUTHENTICATED, SET_USER, STOP_LOADING_UI, SET_CURRENT_CHANNEL } from \"../store/types\";\nimport firebase from \"../../Auth/firebase\";\nimport axios from \"axios\";\nimport jwt_decode from \"jwt-decode\";\nexport const login = (email, password) => (dispatch, next) => {\n  firebase.auth().signInWithEmailAndPassword(email, password).then(data => {\n    if (data) {\n      const {\n        email\n      } = data.user;\n      dispatch(getCurrentUser(email));\n    }\n  }).catch(err => {\n    dispatch({\n      type: SET_ERRORS,\n      payload: err\n    });\n  });\n};\nexport const multiAuth = (provider, scope) => dispatch => {\n  provider.addScope(`${scope[0]}`);\n  if (scope[1]) provider.addScope(`${scope[1]}`);\n  firebase.auth().signInWithPopup(provider).then(result => {\n    if (result.credential) {\n      const {\n        user\n      } = result;\n      let token;\n      const {\n        displayName,\n        email,\n        xa\n      } = user;\n      token = xa;\n      const {\n        picture,\n        user_id\n      } = jwt_decode(token);\n      const userData = {\n        email: email,\n        username: displayName,\n        profileImage: picture\n      };\n      dispatch(getCurrentUser(email));\n      dispatch(googleSignup(userData, user_id));\n    }\n  }).catch(err => {\n    dispatch({\n      type: SET_ERRORS,\n      payload: err\n    });\n  });\n};\nexport const authenticateGoogle = () => dispatch => {\n  dispatch({\n    type: LOADING_UI\n  });\n  const provider = new firebase.auth.GoogleAuthProvider();\n  let scope = [\"profile\", \"email\"];\n  dispatch(multiAuth(provider, scope));\n};\n\nconst registerUser = createdUser => {\n  const userId = firebase.auth().currentUser.uid;\n  const regUser = firebase.database().ref('users');\n  const userRef = firebase.database().ref('/users/' + userId).once('value').then(snapshot => {\n    if (snapshot.exists) {\n      return {\n        type: SET_ERRORS,\n        payload: {\n          email: `${snapshot.email} exists`\n        }\n      };\n    } else {\n      regUser.set;\n    }\n  });\n  userRef.child(createdUser.user.uid).set;\n}; // export const authenticateFaceBook = () => (dispatch) => {\n//   dispatch({type: LOADING_UI})\n//   const provider = new firebase.auth.FacebookAuthProvider()\n//   let scope = [\"user_birthday\"]\n//   dispatch(multiAuth(provider,scope))\n// }\n\n\nexport const authenticateGithub = () => dispatch => {\n  dispatch({\n    type: LOADING_UI\n  });\n  const provider = new firebase.auth.GithubAuthProvider();\n  let scope = [\"repo\"]; // let email = \"email\"\n\n  dispatch(multiAuth(provider, scope));\n};\nexport const googleSignup = (userData, userId) => dispatch => {\n  dispatch({\n    type: LOADING_UI\n  });\n  axios.post(`/google/${userId}`, userData).then(res => {\n    if (res.data) {\n      return;\n    }\n  }).catch(err => {\n    dispatch({\n      type: SET_ERRORS,\n      payload: err\n    });\n  });\n};\nexport const loginUser = userData => dispatch => {\n  dispatch({\n    type: LOADING_UI\n  });\n  axios.post(\"/login\", userData).then(() => {\n    dispatch(login(userData.email, userData.password));\n  }).catch(err => {\n    dispatch({\n      type: SET_ERRORS,\n      payload: err.response.data\n    });\n  });\n};\nexport const signupUser = newUserData => dispatch => {\n  dispatch({\n    type: LOADING_UI\n  });\n  axios.post(\"/signup\", newUserData).then(() => {\n    dispatch(login(newUserData.email, newUserData.password));\n  }).catch(err => {\n    dispatch({\n      type: SET_ERRORS,\n      payload: err.response.data\n    });\n  });\n};\nexport const setAuthenticatedUser = user => {\n  return {\n    type: SET_AUTHENTICATED,\n    payload: user\n  };\n};\nexport const getCurrentUser = email => dispatch => {\n  dispatch({\n    type: LOADING_UI\n  });\n  axios.get(`/user/${email}`).then(user => {\n    if (user) {\n      dispatch({\n        type: SET_USER,\n        payload: user.data\n      });\n    }\n  }).then(() => {\n    dispatch({\n      type: STOP_LOADING_UI\n    });\n  }).catch(err => {\n    console.log(err);\n  });\n};\nexport const setCurrentChannel = channel => dispatch => {\n  dispatch({\n    type: SET_CURRENT_CHANNEL,\n    payload: {\n      currentChannel: channel\n    }\n  });\n};","map":{"version":3,"sources":["/home/alexkhan/Documents/meet-friends/frontend/src/redux/actions/actions.js"],"names":["LOADING_UI","SET_ERRORS","SET_AUTHENTICATED","SET_USER","STOP_LOADING_UI","SET_CURRENT_CHANNEL","firebase","axios","jwt_decode","login","email","password","dispatch","next","auth","signInWithEmailAndPassword","then","data","user","getCurrentUser","catch","err","type","payload","multiAuth","provider","scope","addScope","signInWithPopup","result","credential","token","displayName","xa","picture","user_id","userData","username","profileImage","googleSignup","authenticateGoogle","GoogleAuthProvider","registerUser","createdUser","userId","currentUser","uid","regUser","database","ref","userRef","once","snapshot","exists","set","child","authenticateGithub","GithubAuthProvider","post","res","loginUser","response","signupUser","newUserData","setAuthenticatedUser","get","console","log","setCurrentChannel","channel","currentChannel"],"mappings":"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","sourcesContent":["import { LOADING_UI, SET_ERRORS, SET_AUTHENTICATED, SET_USER, STOP_LOADING_UI,SET_CURRENT_CHANNEL } from \"../store/types\"\nimport firebase from \"../../Auth/firebase\"\nimport axios from \"axios\"\nimport jwt_decode from \"jwt-decode\"\n\nexport const login = (email, password) => (dispatch, next) => {\n  firebase.auth().signInWithEmailAndPassword(email, password).then(data => {\n    if (data) {\n      const {email} = data.user\n      dispatch(getCurrentUser(email))\n    }\n  })\n    .catch((err) => {\n      dispatch({\n        type: SET_ERRORS,\n        payload: err\n      })\n    });\n}\n\n\n\n\nexport const multiAuth = (provider, scope) => (dispatch) => {\n  provider.addScope(`${scope[0]}`);\n  if (scope[1]) provider.addScope(`${scope[1]}`)\n  firebase.auth().signInWithPopup(provider)\n    .then((result) => {\n      if (result.credential) {\n        const { user } = result\n        let token;\n        const { displayName, email, xa } = user\n        token = xa\n        const { picture, user_id } = jwt_decode(token)\n\n        const userData = {\n          email: email,\n          username: displayName,\n          profileImage: picture\n        }\n        dispatch(getCurrentUser(email))\n        dispatch(googleSignup(userData, user_id))\n      }\n    })\n    .catch((err) => {\n      dispatch({\n        type: SET_ERRORS,\n        payload: err\n      })\n    });\n\n}\n\n\nexport const authenticateGoogle = () => (dispatch) => {\n  dispatch({ type: LOADING_UI })\n  const provider = new firebase.auth.GoogleAuthProvider()\n  let scope = [\"profile\", \"email\"]\n  dispatch(multiAuth(provider, scope))\n\n}\n\n\nconst registerUser=(createdUser)=> {\n const userId = firebase.auth().currentUser.uid;\n const regUser = firebase.database().ref('users')\n  const userRef = firebase.database().ref('/users/' + userId).once('value').then(snapshot=> {\n    if(snapshot.exists){\n      return {\n        type: SET_ERRORS,\n        payload: {email: `${snapshot.email} exists`}\n      }\n      \n    }else{\n      regUser.set\n    }\n  })\n  userRef.child(createdUser.user.uid).set\n\n}\n\n\n\n// export const authenticateFaceBook = () => (dispatch) => {\n//   dispatch({type: LOADING_UI})\n//   const provider = new firebase.auth.FacebookAuthProvider()\n//   let scope = [\"user_birthday\"]\n//   dispatch(multiAuth(provider,scope))\n\n// }\n\nexport const authenticateGithub = () => (dispatch) => {\n  dispatch({ type: LOADING_UI })\n  const provider = new firebase.auth.GithubAuthProvider()\n  let scope = [\"repo\"]\n  // let email = \"email\"\n  dispatch(multiAuth(provider, scope))\n}\n\n\nexport const googleSignup = (userData, userId) => (dispatch) => {\n  dispatch({ type: LOADING_UI })\n  axios.post(`/google/${userId}`, userData)\n    .then(res => {\n      if (res.data) {\n        return\n      }\n    })\n    .catch((err) => {\n      dispatch({\n        type: SET_ERRORS,\n        payload: err\n      })\n    });\n\n}\n\nexport const loginUser = (userData) => (dispatch) => {\n  dispatch({ type: LOADING_UI });\n  axios\n    .post(\"/login\", userData)\n    .then(() => {\n      dispatch(login(userData.email, userData.password))\n\n    })\n    .catch((err) => {\n      dispatch({\n        type: SET_ERRORS,\n        payload: err.response.data,\n      });\n    });\n};\n\nexport const signupUser = (newUserData) => (dispatch) => {\n\n  dispatch({ type: LOADING_UI });\n  axios\n    .post(\"/signup\", newUserData)\n    .then(() => {\n      dispatch(login(newUserData.email, newUserData.password));\n    })\n    .catch((err) => {\n      dispatch({\n        type: SET_ERRORS,\n        payload: err.response.data,\n      });\n    });\n};\n\n\nexport const setAuthenticatedUser = (user) => {\n  return {\n    type: SET_AUTHENTICATED,\n    payload: user\n  }\n}\n\nexport const getCurrentUser = (email) => (dispatch) => {\n  dispatch({type: LOADING_UI})\n  axios.get(`/user/${email}`).then(user => {\n    if(user){\n      dispatch({ type: SET_USER, payload: user.data })\n    }\n  }).then(()=> {\n    dispatch({type: STOP_LOADING_UI})\n  })\n  .catch((err) => {\n   console.log(err)\n  })\n}\n\nexport const setCurrentChannel = (channel)=> (dispatch)=>{\n  dispatch({\n    type: SET_CURRENT_CHANNEL,\n    payload:{\n      currentChannel: channel\n    }\n  })\n}\n"]},"metadata":{},"sourceType":"module"}