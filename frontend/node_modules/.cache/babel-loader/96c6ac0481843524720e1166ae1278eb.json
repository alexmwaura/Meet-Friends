{"ast":null,"code":"var _jsxFileName = \"/home/alexkhan/Documents/meet-friends/frontend/src/components/messages/messageForm.js\";\nimport React, { Component } from \"react\";\nimport { Segment, Button, Input } from \"semantic-ui-react\";\nimport firebase from \"../../Auth/firebase\";\nimport FileModal from \"./fileModal\";\nimport uuidv4 from \"uuid/v4\";\nimport ProgressBar from \"./ProgressBar\";\n\nclass messageForm extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      storageRef: firebase.storage().ref(),\n      uploadState: \"\",\n      uploadTask: null,\n      message: \"\",\n      loading: false,\n      channel: this.props.currentChannel,\n      user: this.props.currentUser,\n      messagesRef: this.props.messagesRef,\n      errors: [],\n      modal: false,\n      percentUploaded: 0\n    };\n\n    this.openModal = () => this.setState({\n      modal: true\n    });\n\n    this.closeModal = () => this.setState({\n      modal: false\n    });\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.createMessage = (fileUrl = null) => {\n      const {\n        user\n      } = this.state;\n      const message = {\n        timestamp: firebase.database.ServerValue.TIMESTAMP,\n        user: {\n          id: user.userId,\n          name: user.username,\n          avatar: user.profileImage\n        }\n      };\n\n      if (fileUrl !== null) {\n        message[\"image\"] = fileUrl;\n      } else {\n        message[\"content\"] = this.state.message;\n      }\n\n      return message;\n    };\n\n    this.uploadFile = (file, metadata) => {\n      console.log(file, metadata); // const pathToUpload = this.state.channel.id;\n      // const ref = this.props.messagesRef;\n      // const filePath = `chat/public/${uuidv4()}.jpg`;\n      // this.setState(\n      //   {\n      //     uploadState: \"uploading\",\n      //     uploadTask: this.state.storageRef.child(filePath).put(file, metadata)\n      //   },\n      //   () => {\n      //     this.state.uploadTask.on(\n      //       \"state_changed\",\n      //       snap => {\n      //         const percentUploaded = Math.round(\n      //           (snap.bytesTransferred / snap.totalBytes) * 100\n      //         );\n      //         this.setState({ percentUploaded });\n      //       },\n      //       err => {\n      //         console.error(err);\n      //         this.setState({\n      //           errors: this.state.errors.concat(err),\n      //           uploadState: \"error\",\n      //           uploadTask: null\n      //         });\n      //       },\n      //       () => {\n      //         this.state.uploadTask.snapshot.ref\n      //           .getDownloadURL()\n      //           .then(downloadUrl => {\n      //             this.sendFileMessage(downloadUrl, ref, pathToUpload);\n      //           })\n      //           .catch(err => {\n      //             console.error(err);\n      //             this.setState({\n      //               errors: this.state.errors.concat(err),\n      //               uploadState: \"error\",\n      //               uploadTask: null\n      //             });\n      //           });\n      //       }\n      //     );\n      //   }\n      // );\n    };\n\n    this.sendMessage = () => {\n      const {\n        message,\n        channel,\n        messagesRef\n      } = this.state;\n\n      if (message) {\n        this.setState({\n          loading: true\n        });\n        messagesRef.child(channel.id).push().set(this.createMessage()).then(() => {\n          this.setState({\n            loading: false,\n            message: \"\",\n            errors: []\n          });\n        }).catch(error => {\n          console.error(error);\n          this.setState({\n            loading: false,\n            errors: this.state.errors.concat(error)\n          });\n        });\n      } else {\n        this.setState({\n          errors: this.state.errors.concat({\n            message: \"Add a message\"\n          })\n        });\n      }\n    };\n\n    this.sendFileMessage = (fileUrl, ref, pathToUpload) => {\n      ref.child(pathToUpload).push().set(this.createMessage(fileUrl)).then(() => {\n        this.setState({\n          uploadState: \"done\"\n        });\n      }).catch(err => {\n        console.error(err);\n        this.setState({\n          errors: this.state.errors.concat(err)\n        });\n      });\n    };\n  }\n\n  render() {\n    const {\n      errors,\n      message,\n      loading,\n      modal,\n      uploadState,\n      percentUploaded\n    } = this.state;\n    return /*#__PURE__*/React.createElement(Segment, {\n      className: \"message__form\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      fluid: true,\n      name: \"message\",\n      style: {\n        marginBottom: \"0.7em\"\n      },\n      label: /*#__PURE__*/React.createElement(Button, {\n        icon: \"add\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 18\n        }\n      }),\n      value: message,\n      labelPosition: \"left\",\n      placeholder: \"Write your message\",\n      onChange: this.handleChange,\n      className: errors.some(error => error.message.includes(\"message\")) ? \"error\" : \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Button.Group, {\n      icon: true,\n      widths: \"2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      color: \"orange\",\n      content: \"Add Reply\",\n      labelPosition: \"left\",\n      icon: \"edit\",\n      onClick: this.sendMessage,\n      disabled: loading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(FileModal, {\n      modal: modal,\n      closeModal: this.closeModal,\n      uploadFile: this.uploadFile,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      color: \"teal\",\n      content: \"Upload Media\",\n      labelPosition: \"right\",\n      icon: \"cloud upload\",\n      onClick: this.openModal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(ProgressBar, {\n      uploadState: uploadState,\n      percentUploaded: percentUploaded,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default messageForm;","map":{"version":3,"sources":["/home/alexkhan/Documents/meet-friends/frontend/src/components/messages/messageForm.js"],"names":["React","Component","Segment","Button","Input","firebase","FileModal","uuidv4","ProgressBar","messageForm","state","storageRef","storage","ref","uploadState","uploadTask","message","loading","channel","props","currentChannel","user","currentUser","messagesRef","errors","modal","percentUploaded","openModal","setState","closeModal","handleChange","event","target","name","value","createMessage","fileUrl","timestamp","database","ServerValue","TIMESTAMP","id","userId","username","avatar","profileImage","uploadFile","file","metadata","console","log","sendMessage","child","push","set","then","catch","error","concat","sendFileMessage","pathToUpload","err","render","marginBottom","some","includes"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Segment, Button, Input } from \"semantic-ui-react\";\nimport firebase from \"../../Auth/firebase\";\nimport FileModal from \"./fileModal\";\nimport uuidv4 from \"uuid/v4\";\nimport ProgressBar from \"./ProgressBar\";\n\nclass messageForm extends Component {\n  state = {\n    storageRef: firebase.storage().ref(),\n    uploadState: \"\",\n    uploadTask: null,\n    message: \"\",\n    loading: false,\n    channel: this.props.currentChannel,\n    user: this.props.currentUser,\n    messagesRef: this.props.messagesRef,\n    errors: [],\n    modal: false,\n    percentUploaded: 0,\n  };\n\n\n  openModal = () => this.setState({ modal: true });\n  closeModal = () => this.setState({ modal: false });\n\n  handleChange = (event) => {\n    this.setState({ [event.target.name]: event.target.value });\n  };\n\n  createMessage = (fileUrl = null) => {\n    const { user } = this.state;\n    const message = {\n      timestamp: firebase.database.ServerValue.TIMESTAMP,\n      user: {\n        id: user.userId,\n        name: user.username,\n        avatar: user.profileImage,\n      },\n    };\n    if (fileUrl !== null) {\n      message[\"image\"] = fileUrl;\n    } else {\n      message[\"content\"] = this.state.message;\n    }\n    return message;\n  };\n\n\n  uploadFile = (file, metadata) => {\n      console.log(file,metadata)\n    // const pathToUpload = this.state.channel.id;\n    // const ref = this.props.messagesRef;\n    // const filePath = `chat/public/${uuidv4()}.jpg`;\n\n    // this.setState(\n    //   {\n    //     uploadState: \"uploading\",\n    //     uploadTask: this.state.storageRef.child(filePath).put(file, metadata)\n    //   },\n    //   () => {\n    //     this.state.uploadTask.on(\n    //       \"state_changed\",\n    //       snap => {\n    //         const percentUploaded = Math.round(\n    //           (snap.bytesTransferred / snap.totalBytes) * 100\n    //         );\n    //         this.setState({ percentUploaded });\n    //       },\n    //       err => {\n    //         console.error(err);\n    //         this.setState({\n    //           errors: this.state.errors.concat(err),\n    //           uploadState: \"error\",\n    //           uploadTask: null\n    //         });\n    //       },\n    //       () => {\n    //         this.state.uploadTask.snapshot.ref\n    //           .getDownloadURL()\n    //           .then(downloadUrl => {\n    //             this.sendFileMessage(downloadUrl, ref, pathToUpload);\n    //           })\n    //           .catch(err => {\n    //             console.error(err);\n    //             this.setState({\n    //               errors: this.state.errors.concat(err),\n    //               uploadState: \"error\",\n    //               uploadTask: null\n    //             });\n    //           });\n    //       }\n    //     );\n    //   }\n    // );\n  };\n\n  sendMessage = () => {\n    const { message, channel, messagesRef } = this.state;\n    if (message) {\n      this.setState({ loading: true });\n      messagesRef\n        .child(channel.id)\n        .push()\n        .set(this.createMessage())\n        .then(() => {\n          this.setState({ loading: false, message: \"\", errors: [] });\n        })\n        .catch((error) => {\n          console.error(error);\n          this.setState({\n            loading: false,\n            errors: this.state.errors.concat(error),\n          });\n        });\n    } else {\n      this.setState({\n        errors: this.state.errors.concat({ message: \"Add a message\" }),\n      });\n    }\n  };\n\n  sendFileMessage = (fileUrl, ref, pathToUpload) => {\n    ref\n      .child(pathToUpload)\n      .push()\n      .set(this.createMessage(fileUrl))\n      .then(() => {\n        this.setState({ uploadState: \"done\" });\n      })\n      .catch((err) => {\n        console.error(err);\n        this.setState({\n          errors: this.state.errors.concat(err),\n        });\n      });\n  };\n\n  render() {\n    const {\n      errors,\n      message,\n      loading,\n      modal,\n      uploadState,\n      percentUploaded,\n    } = this.state;\n    return (\n      <Segment className=\"message__form\">\n        <Input\n          fluid\n          name=\"message\"\n          style={{ marginBottom: \"0.7em\" }}\n          label={<Button icon={\"add\"} />}\n          value={message}\n          labelPosition=\"left\"\n          placeholder=\"Write your message\"\n          onChange={this.handleChange}\n          className={\n            errors.some((error) => error.message.includes(\"message\"))\n              ? \"error\"\n              : \"\"\n          }\n        />\n        <Button.Group icon widths=\"2\">\n          <Button\n            color=\"orange\"\n            content=\"Add Reply\"\n            labelPosition=\"left\"\n            icon=\"edit\"\n            onClick={this.sendMessage}\n            disabled={loading}\n          />\n          <FileModal\n            modal={modal}\n            closeModal={this.closeModal}\n            uploadFile={this.uploadFile}\n          />\n          <Button\n            color=\"teal\"\n            content=\"Upload Media\"\n            labelPosition=\"right\"\n            icon=\"cloud upload\"\n            onClick={this.openModal}\n          />\n        </Button.Group>\n        <ProgressBar\n          uploadState={uploadState}\n          percentUploaded={percentUploaded}\n        />\n      </Segment>\n    );\n  }\n}\n\nexport default messageForm;\n"]},"metadata":{},"sourceType":"module"}