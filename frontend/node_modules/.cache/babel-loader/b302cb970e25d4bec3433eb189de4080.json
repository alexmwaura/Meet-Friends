{"ast":null,"code":"import { LOADING_USER, LOADING_UI, SET_GOOGLE_USER, SET_ERRORS, CLEAR_ERRORS } from \"../store/types\";\nimport * as firebase from \"firebase\";\nimport Config from \"../../config/config\";\nimport axios from \"axios\";\nimport jwt_decode from \"jwt-decode\";\n\nconst setAuthorizationHeader = token => {\n  const authToken = `Bearer ${token}`;\n  localStorage.setItem(\"token\", token);\n  axios.defaults.headers.common[\"Authorization\"] = authToken;\n};\n\nfirebase.initializeApp(Config);\nexport const multiAuth = (provider, firstScope, secondScope) => dispatch => {\n  provider.addScope(`${firstScope}`);\n  if (secondScope) provider.addScope(`${secondScope}`);\n  firebase.auth().signInWithPopup(provider).then(result => {\n    if (result.credential) {\n      const {\n        user,\n        credential\n      } = result;\n      const {\n        accessToken\n      } = credential;\n      let token;\n      console.log(accessToken);\n      const {\n        displayName,\n        email,\n        xa\n      } = user;\n      console.log(firebase.auth().currentUser);\n      token = xa;\n      localStorage.setItem(\"token\", token);\n      const {\n        picture,\n        user_id\n      } = jwt_decode(token);\n      const userData = {\n        email: email,\n        username: displayName,\n        profileImage: picture\n      };\n      dispatch(googleSignup(userData, user_id));\n    }\n  }).catch(err => {\n    dispatch({\n      type: SET_ERRORS,\n      payload: err\n    });\n    console.log(err);\n  });\n};\nexport const authenticateGoogle = () => dispatch => {\n  dispatch({\n    type: LOADING_UI\n  });\n  const provider = new firebase.auth.GoogleAuthProvider();\n  let profile = \"profile\";\n  let email = \"email\";\n  dispatch(multiAuth(provider, profile, email));\n};\nexport const authenticateGithub = () => dispatch => {\n  dispatch({\n    type: LOADING_UI\n  });\n  const provider = new firebase.auth.GithubAuthProvider();\n  let repo = \"repo\"; // let email = \"email\"\n\n  dispatch(multiAuth(provider, repo));\n};\nexport const googleSignup = (userData, userId) => dispatch => {\n  dispatch({\n    type: LOADING_USER\n  });\n  axios.post(`/google/${userId}`, userData).then(res => {\n    dispatch({\n      type: SET_GOOGLE_USER,\n      payload: res.data\n    }); // window.location.href = \"/\"\n  }).catch(err => console.log(err));\n};\nexport const loginUser = (userData, history) => dispatch => {\n  dispatch({\n    type: LOADING_UI\n  });\n  axios.post(\"/login\", userData).then(res => {\n    setAuthorizationHeader(res.data.token);\n    dispatch({\n      type: CLEAR_ERRORS\n    });\n    const {\n      token\n    } = res.data;\n    localStorage.setItem(\"token\", token);\n    history.push(\"/\");\n    window.location.reload();\n  }).catch(err => {\n    dispatch({\n      type: SET_ERRORS,\n      payload: err.response.data\n    });\n  });\n};\nexport const signupUser = (newUserData, history) => dispatch => {\n  dispatch({\n    type: LOADING_UI\n  });\n  axios.post(\"/signup\", newUserData).then(res => {\n    setAuthorizationHeader(res.data.token);\n    dispatch({\n      type: CLEAR_ERRORS\n    });\n    const {\n      token\n    } = res.data;\n    localStorage.setItem(\"token\", token);\n    history.push(\"/\");\n    window.location.reload();\n  }).catch(err => {\n    dispatch({\n      type: SET_ERRORS,\n      payload: err.response.data\n    });\n  });\n};","map":{"version":3,"sources":["/home/alexkhan/Documents/meet-friends/frontend/src/redux/actions/userActions.js"],"names":["LOADING_USER","LOADING_UI","SET_GOOGLE_USER","SET_ERRORS","CLEAR_ERRORS","firebase","Config","axios","jwt_decode","setAuthorizationHeader","token","authToken","localStorage","setItem","defaults","headers","common","initializeApp","multiAuth","provider","firstScope","secondScope","dispatch","addScope","auth","signInWithPopup","then","result","credential","user","accessToken","console","log","displayName","email","xa","currentUser","picture","user_id","userData","username","profileImage","googleSignup","catch","err","type","payload","authenticateGoogle","GoogleAuthProvider","profile","authenticateGithub","GithubAuthProvider","repo","userId","post","res","data","loginUser","history","push","window","location","reload","response","signupUser","newUserData"],"mappings":"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","sourcesContent":["import {LOADING_USER,LOADING_UI, SET_GOOGLE_USER,SET_ERRORS,CLEAR_ERRORS} from \"../store/types\"\nimport * as firebase from \"firebase\"\nimport Config from \"../../config/config\"\nimport axios from \"axios\"\nimport jwt_decode from \"jwt-decode\"\n\nconst setAuthorizationHeader = (token) => {\n  const authToken = `Bearer ${token}`;\n  localStorage.setItem(\"token\", token);\n  axios.defaults.headers.common[\"Authorization\"] = authToken;\n};\n\nfirebase.initializeApp(Config)\n\n\n\nexport const multiAuth = (provider,firstScope,secondScope) => (dispatch)=> {\n    provider.addScope(`${firstScope}`);\n    if(secondScope)provider.addScope(`${secondScope}`)\n    firebase.auth().signInWithPopup(provider)\n    .then((result) =>{\n        if (result.credential) {\n        const {user,credential} = result\n        const {accessToken} = credential\n        let token;   \n        console.log(accessToken)   \n        const  {displayName, email,xa} = user\n        console.log(firebase.auth().currentUser)\n        token = xa\n        localStorage.setItem(\"token\", token)\n        const {picture,user_id} =  jwt_decode(token)   \n\n        const userData = {\n             email: email,\n             username: displayName,\n             profileImage: picture\n        }\n       \n        dispatch(googleSignup(userData,user_id))\n        }   \n      }) \n    .catch((err) => {\n        dispatch({\n            type: SET_ERRORS,\n            payload: err\n        })\n        console.log(err)\n    });\n\n}\n\n\nexport const authenticateGoogle = () => (dispatch) => {\n    dispatch({type: LOADING_UI})\n    const provider = new firebase.auth.GoogleAuthProvider()\n    let profile = \"profile\"\n    let email = \"email\"\n    dispatch(multiAuth(provider,profile,email))\n\n}\n\nexport const authenticateGithub = () => (dispatch) => {\n    dispatch({type: LOADING_UI})\n    const provider = new firebase.auth.GithubAuthProvider()\n    let repo = \"repo\"\n    // let email = \"email\"\n    dispatch(multiAuth(provider,repo))\n}\n\n\nexport const googleSignup = (userData,userId) => (dispatch) => {\n    dispatch({type: LOADING_USER})\n    axios.post(`/google/${userId}`,userData)\n    .then(res=> {\n        dispatch({\n            type: SET_GOOGLE_USER,\n            payload: res.data\n        })\n        \n        // window.location.href = \"/\"\n    })\n    .catch((err) => console.log(err));\n\n}\n\nexport const loginUser = (userData, history) => (dispatch) => {\n    dispatch({ type: LOADING_UI });\n    axios\n      .post(\"/login\", userData)\n      .then( (res) => {\n        setAuthorizationHeader(res.data.token);\n        dispatch({ type: CLEAR_ERRORS }); \n          const {token} = res.data;\n          localStorage.setItem(\"token\", token);\n          history.push(\"/\")\n          window.location.reload();\n    \n      })\n      .catch((err) => {\n        dispatch({\n          type: SET_ERRORS,\n          payload: err.response.data,\n        });\n      });\n  };\n  \n  export const signupUser = (newUserData, history) => (dispatch) => {\n   \n    dispatch({ type: LOADING_UI });\n    axios\n      .post(\"/signup\", newUserData)\n      .then( (res) => {\n        setAuthorizationHeader(res.data.token);\n        dispatch({ type: CLEAR_ERRORS }); \n          const {token} = res.data;\n          localStorage.setItem(\"token\", token);\n          history.push(\"/\")\n          window.location.reload();\n    \n      })\n      .catch((err) => {\n        dispatch({\n          type: SET_ERRORS,\n          payload: err.response.data,\n        });\n      });\n  };\n  "]},"metadata":{},"sourceType":"module"}