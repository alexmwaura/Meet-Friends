{"ast":null,"code":"var _jsxFileName = \"/home/alexkhan/Documents/meet-friends/frontend/src/components/messages/Messages.js\";\nimport React, { Component, Fragment } from \"react\";\nimport { Segment, Comment } from \"semantic-ui-react\";\nimport MessagesHeader from \"./messageHeader\";\nimport MessageForm from \"./messageForm\";\nimport firebase from \"../../Auth/firebase\";\nimport Message from \"./Message\";\nimport Spinner from \"../spinner/spinner\";\n\nclass Messages extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      privateChannel: this.props.isPrivateChannel,\n      messagesRef: firebase.database().ref(\"messages\"),\n      channel: this.props.currentChannel,\n      currentUser: this.props.authenticatedUser,\n      messages: [],\n      loading: true,\n      numUniqueUsers: \"\",\n      searchTerm: \"\",\n      searchLoading: false,\n      searchResults: []\n    };\n\n    this.addListeners = channelId => {\n      this.addMessageListener(channelId);\n    };\n\n    this.addMessageListener = channelId => {\n      let loadedMessages = [];\n      this.state.messagesRef.child(channelId).on(\"child_added\", snap => {\n        loadedMessages.push(snap.val());\n        this.setState({\n          messages: loadedMessages,\n          loading: false\n        });\n      });\n      this.countUniqueUsers(loadedMessages);\n    };\n\n    this.countUniqueUsers = messages => {\n      const uniqueUsers = messages.reduce((acc, message) => {\n        if (!acc.includes(message.user.id)) {\n          acc.push(message.user.id);\n        }\n\n        return acc;\n      }, []);\n      const numUniqueUsers = `${uniqueUsers.length} user${uniqueUsers.length > 1 ? \"s\" : \"\"}`;\n      this.setState({\n        numUniqueUsers: numUniqueUsers\n      });\n    };\n\n    this.displayMessages = messages => messages.length > 0 ? messages.map(message => /*#__PURE__*/React.createElement(Message, {\n      key: message.timestamp,\n      message: message,\n      user: this.state.currentUser,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }\n    })) : /*#__PURE__*/React.createElement(Spinner, {\n      messages: messages,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 7\n      }\n    });\n\n    this.displayChannelName = channel => {\n      return channel ? `${this.state.isPrivateChannel ? \"@\" : \"#\"}${channel.name}` : \"\";\n    };\n\n    this.getUserPhoto = channel => {\n      return channel && channel.photoImage ? channel.photoImage : '';\n    };\n\n    this.handleSearch = event => {\n      this.setState({\n        searchTerm: event.target.value,\n        searchLoading: true\n      }, () => {\n        this.handleSearchMessages();\n      });\n    };\n\n    this.handleSearchMessages = () => {\n      const channelMessages = [...this.state.messages];\n      const regex = new RegExp(this.state.searchTerm, \"gi\");\n      const searchResults = channelMessages.reduce((acc, message) => {\n        if (message.content && message.content.match(regex) || message.user.name.match(regex)) {\n          acc.push(message);\n        }\n\n        return acc;\n      }, []);\n      this.setState({\n        searchResults: searchResults\n      });\n      setTimeout(() => this.setState({\n        searchLoading: false\n      }), 1000);\n    };\n  }\n\n  componentDidMount() {\n    const {\n      channel,\n      currentUser\n    } = this.state;\n\n    if (channel && currentUser) {\n      this.addListeners(channel.id);\n    }\n  }\n\n  render() {\n    const {\n      messagesRef,\n      channel,\n      currentUser,\n      messages,\n      numUniqueUsers,\n      searchTerm,\n      searchResults,\n      searchLoading,\n      privateChannel\n    } = this.state;\n    console.log(channel);\n    return /*#__PURE__*/React.createElement(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(MessagesHeader, {\n      handleSearch: this.handleSearch,\n      channelName: this.displayChannelName(channel),\n      numUniqueUsers: numUniqueUsers,\n      searchLoading: searchLoading,\n      privateChannel: privateChannel,\n      userPhoto: this.getUserPhoto(channel),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Segment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Comment.Group, {\n      className: \"messages\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 11\n      }\n    }, searchTerm ? this.displayMessages(searchResults) : this.displayMessages(messages))), /*#__PURE__*/React.createElement(MessageForm, {\n      messagesRef: messagesRef,\n      currentChannel: channel,\n      currentUser: currentUser,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default Messages;","map":{"version":3,"sources":["/home/alexkhan/Documents/meet-friends/frontend/src/components/messages/Messages.js"],"names":["React","Component","Fragment","Segment","Comment","MessagesHeader","MessageForm","firebase","Message","Spinner","Messages","state","privateChannel","props","isPrivateChannel","messagesRef","database","ref","channel","currentChannel","currentUser","authenticatedUser","messages","loading","numUniqueUsers","searchTerm","searchLoading","searchResults","addListeners","channelId","addMessageListener","loadedMessages","child","on","snap","push","val","setState","countUniqueUsers","uniqueUsers","reduce","acc","message","includes","user","id","length","displayMessages","map","timestamp","displayChannelName","name","getUserPhoto","photoImage","handleSearch","event","target","value","handleSearchMessages","channelMessages","regex","RegExp","content","match","setTimeout","componentDidMount","render","console","log"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from \"react\";\nimport { Segment, Comment } from \"semantic-ui-react\";\nimport MessagesHeader from \"./messageHeader\";\nimport MessageForm from \"./messageForm\";\nimport firebase from \"../../Auth/firebase\";\nimport Message from \"./Message\";\nimport Spinner from \"../spinner/spinner\";\n\nclass Messages extends Component {\n  state = {\n    privateChannel: this.props.isPrivateChannel,\n    messagesRef: firebase.database().ref(\"messages\"),\n    channel: this.props.currentChannel,\n    currentUser: this.props.authenticatedUser,\n    messages: [],\n    loading: true,\n    numUniqueUsers: \"\",\n    searchTerm: \"\",\n    searchLoading: false,\n    searchResults: [],\n  };\n\n  componentDidMount() {\n    const { channel, currentUser } = this.state;\n    if (channel && currentUser) {\n      this.addListeners(channel.id);\n    }\n  }\n\n  addListeners = (channelId) => {\n    this.addMessageListener(channelId);\n  };\n\n  addMessageListener = (channelId) => {\n    let loadedMessages = [];\n    this.state.messagesRef.child(channelId).on(\"child_added\", (snap) => {\n      loadedMessages.push(snap.val());\n      this.setState({ messages: loadedMessages, loading: false });\n    });\n    this.countUniqueUsers(loadedMessages);\n  };\n\n  countUniqueUsers = (messages) => {\n    const uniqueUsers = messages.reduce((acc, message) => {\n      if (!acc.includes(message.user.id)) {\n        acc.push(message.user.id);\n      }\n      return acc;\n    }, []);\n\n    const numUniqueUsers = `${uniqueUsers.length} user${\n      uniqueUsers.length > 1 ? \"s\" : \"\"\n    }`;\n    this.setState({ numUniqueUsers: numUniqueUsers });\n  };\n\n  displayMessages = (messages) =>\n    messages.length > 0 ? (\n      messages.map((message) => (\n        <Message\n          key={message.timestamp}\n          message={message}\n          user={this.state.currentUser}\n        />\n      ))\n    ) : (\n      <Spinner messages={messages} />\n    );\n\n  displayChannelName = (channel) => {\n    return channel\n      ? `${this.state.isPrivateChannel ? \"@\" : \"#\"}${channel.name}`\n      : \"\";\n  };\n\n  getUserPhoto = (channel)=> {\n    return channel && channel.photoImage ? channel.photoImage: ''\n  }\n\n  handleSearch = (event) => {\n    this.setState(\n      {\n        searchTerm: event.target.value,\n        searchLoading: true,\n      },\n      () => {\n        this.handleSearchMessages();\n      }\n    );\n  };\n  handleSearchMessages = () => {\n    const channelMessages = [...this.state.messages];\n    const regex = new RegExp(this.state.searchTerm, \"gi\");\n    const searchResults = channelMessages.reduce((acc, message) => {\n      if (\n        (message.content && message.content.match(regex)) ||\n        message.user.name.match(regex)\n      ) {\n        acc.push(message);\n      }\n      return acc;\n    }, []);\n    this.setState({ searchResults: searchResults });\n    setTimeout(() => this.setState({ searchLoading: false }), 1000);\n  };\n\n  render() {\n    const {\n      messagesRef,\n      channel,\n      currentUser,\n      messages,\n      numUniqueUsers,\n      searchTerm,\n      searchResults,\n      searchLoading,\n      privateChannel,\n    } = this.state;\n    console.log(channel)\n    return (\n      <Fragment>\n        <MessagesHeader\n          handleSearch={this.handleSearch}\n          channelName={this.displayChannelName(channel)}\n          numUniqueUsers={numUniqueUsers}\n          searchLoading={searchLoading}\n          privateChannel={privateChannel}\n          userPhoto={this.getUserPhoto(channel)}\n        />\n        <Segment>\n          <Comment.Group className=\"messages\">\n            {searchTerm\n              ? this.displayMessages(searchResults)\n              : this.displayMessages(messages)}\n          </Comment.Group>\n        </Segment>\n        <MessageForm\n          messagesRef={messagesRef}\n          currentChannel={channel}\n          currentUser={currentUser}\n        />\n      </Fragment>\n    );\n  }\n}\n\nexport default Messages;\n"]},"metadata":{},"sourceType":"module"}