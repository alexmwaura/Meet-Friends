{"ast":null,"code":"import { LOADING_USER, LOADING_UI, SET_ERRORS, SET_AUTHENTICATED } from \"../store/types\";\nimport firebase from \"../../Auth/firebase\";\nimport axios from \"axios\";\nimport jwt_decode from \"jwt-decode\";\nexport const login = (email, password) => (dispatch, next) => {\n  firebase.auth().signInWithEmailAndPassword(email, password).then(data => {\n    if (data) {\n      return next;\n    }\n  }).catch(err => {\n    dispatch({\n      type: SET_ERRORS,\n      payload: err\n    });\n    console.log(err);\n  });\n};\nexport const multiAuth = (provider, scope) => dispatch => {\n  provider.addScope(`${scope[0]}`);\n  if (scope[1]) provider.addScope(`${scope[1]}`);\n  firebase.auth().signInWithPopup(provider).then(result => {\n    if (result.credential) {\n      const {\n        user,\n        credential\n      } = result;\n      const {\n        accessToken\n      } = credential;\n      let token;\n      console.log(accessToken);\n      const {\n        displayName,\n        email,\n        xa\n      } = user;\n      console.log(firebase.auth().currentUser);\n      token = xa;\n      const {\n        picture,\n        user_id\n      } = jwt_decode(token);\n      const userData = {\n        email: email,\n        username: displayName,\n        profileImage: picture\n      };\n      dispatch(googleSignup(userData, user_id));\n    }\n  }).catch(err => {\n    dispatch({\n      type: SET_ERRORS,\n      payload: err\n    });\n    console.log(err);\n  });\n};\nexport const authenticateGoogle = () => dispatch => {\n  dispatch({\n    type: LOADING_UI\n  });\n  const provider = new firebase.auth.GoogleAuthProvider();\n  let scope = [\"profile\", \"email\"];\n  dispatch(multiAuth(provider, scope));\n}; // export const authenticateGoogle = () => (dispatch) => {\n//   dispatch({type: LOADING_UI})\n//   const provider = new firebase.auth.FacebookAuthProvider()\n//   let scope = [\"user_birthday\"]\n//   dispatch(multiAuth(provider,scope))\n// }\n\nexport const authenticateGithub = () => dispatch => {\n  dispatch({\n    type: LOADING_UI\n  });\n  const provider = new firebase.auth.GithubAuthProvider();\n  let scope = [\"repo\"]; // let email = \"email\"\n\n  dispatch(multiAuth(provider, scope));\n};\nexport const googleSignup = (userData, userId) => dispatch => {\n  dispatch({\n    type: LOADING_USER\n  });\n  axios.post(`/google/${userId}`, userData).then(res => {\n    if (res.data) {\n      return;\n    }\n  }).catch(err => console.log(err));\n};\nexport const loginUser = userData => dispatch => {\n  dispatch({\n    type: LOADING_UI\n  });\n  axios.post(\"/login\", userData).then(() => {\n    dispatch(login(userData.email, userData.password));\n  }).catch(err => {\n    dispatch({\n      type: SET_ERRORS,\n      payload: err.response.data\n    });\n  });\n};\nexport const signupUser = newUserData => dispatch => {\n  dispatch({\n    type: LOADING_UI\n  });\n  axios.post(\"/signup\", newUserData).then(() => {\n    dispatch(login(newUserData.email, newUserData.password));\n  }).catch(err => {\n    dispatch({\n      type: SET_ERRORS,\n      payload: err.response.data\n    });\n  });\n};\nexport const setAuthenticatedUser = user => {\n  return {\n    type: SET_AUTHENTICATED,\n    payload: {\n      authenticateduser: user\n    }\n  };\n};\nexport const getCurrentUser = userId => {\n  firebase;\n};","map":{"version":3,"sources":["/home/alexkhan/Documents/meet-friends/frontend/src/redux/actions/userActions.js"],"names":["LOADING_USER","LOADING_UI","SET_ERRORS","SET_AUTHENTICATED","firebase","axios","jwt_decode","login","email","password","dispatch","next","auth","signInWithEmailAndPassword","then","data","catch","err","type","payload","console","log","multiAuth","provider","scope","addScope","signInWithPopup","result","credential","user","accessToken","token","displayName","xa","currentUser","picture","user_id","userData","username","profileImage","googleSignup","authenticateGoogle","GoogleAuthProvider","authenticateGithub","GithubAuthProvider","userId","post","res","loginUser","response","signupUser","newUserData","setAuthenticatedUser","authenticateduser","getCurrentUser"],"mappings":"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","sourcesContent":["import {LOADING_USER,LOADING_UI,SET_ERRORS, SET_AUTHENTICATED} from \"../store/types\"\nimport firebase from \"../../Auth/firebase\"\nimport axios from \"axios\"\nimport jwt_decode from \"jwt-decode\"\n\nexport const login = (email,password) => (dispatch,next) => {\n  firebase.auth().signInWithEmailAndPassword(email,password).then(data=> {\n    if(data){\n     return next\n    }\n  }) \n  .catch((err) => {\n    dispatch({\n        type: SET_ERRORS,\n        payload: err\n    })\n    console.log(err)\n});\n}\n\n\n\n\nexport const multiAuth = (provider,scope) => (dispatch)=> {\n    provider.addScope(`${scope[0]}`);\n    if(scope[1])provider.addScope(`${scope[1]}`)\n    firebase.auth().signInWithPopup(provider)\n    .then((result) =>{\n        if (result.credential) {\n        const {user,credential} = result\n        const {accessToken} = credential\n        let token;   \n        console.log(accessToken)   \n        const  {displayName, email,xa} = user\n        console.log(firebase.auth().currentUser)\n        token = xa\n        const {picture,user_id} =  jwt_decode(token)   \n\n        const userData = {\n             email: email,\n             username: displayName,\n             profileImage: picture\n        }\n        dispatch(googleSignup(userData,user_id))\n        }   \n      }) \n    .catch((err) => {\n        dispatch({\n            type: SET_ERRORS,\n            payload: err\n        })\n        console.log(err)\n    });\n\n}\n\n\nexport const authenticateGoogle = () => (dispatch) => {\n    dispatch({type: LOADING_UI})\n    const provider = new firebase.auth.GoogleAuthProvider()\n    let scope = [\"profile\", \"email\"]\n    dispatch(multiAuth(provider,scope))\n\n}\n\n\n\n// export const authenticateGoogle = () => (dispatch) => {\n//   dispatch({type: LOADING_UI})\n//   const provider = new firebase.auth.FacebookAuthProvider()\n//   let scope = [\"user_birthday\"]\n//   dispatch(multiAuth(provider,scope))\n\n// }\n\nexport const authenticateGithub = () => (dispatch) => {\n    dispatch({type: LOADING_UI})\n    const provider = new firebase.auth.GithubAuthProvider()\n    let scope = [\"repo\"]\n    // let email = \"email\"\n    dispatch(multiAuth(provider,scope))\n}\n\n\nexport const googleSignup = (userData,userId) => (dispatch) => {\n    dispatch({type: LOADING_USER})\n    axios.post(`/google/${userId}`,userData)\n    .then(res=> {\n       if(res.data){\n        return\n       }\n    })\n    .catch((err) => console.log(err));\n\n}\n\nexport const loginUser = (userData) => (dispatch) => {\n    dispatch({ type: LOADING_UI });\n    axios\n      .post(\"/login\", userData)\n      .then( () => {\n        dispatch(login(userData.email,userData.password))\n    \n      })\n      .catch((err) => {\n        dispatch({\n          type: SET_ERRORS,\n          payload: err.response.data,\n        });\n      });\n  };\n  \n  export const signupUser = (newUserData) => (dispatch) => {\n   \n    dispatch({ type: LOADING_UI });\n    axios\n      .post(\"/signup\", newUserData)\n      .then( () => {\n        dispatch(login(newUserData.email,newUserData.password)); \n      })\n      .catch((err) => {\n        dispatch({\n          type: SET_ERRORS,\n          payload: err.response.data,\n        });\n      });\n  };\n\n  \nexport const setAuthenticatedUser = (user) => {\n  return {\n    type: SET_AUTHENTICATED,\n    payload: {\n      authenticateduser: user\n    }\n  }\n}  \n\nexport const getCurrentUser = (userId) => {\n  firebase\n}"]},"metadata":{},"sourceType":"module"}