{"ast":null,"code":"import { LOADING_UI, SET_ERRORS, SET_AUTHENTICATED, SET_USER, STOP_LOADING_UI } from \"../store/types\";\nimport firebase from \"../../Auth/firebase\";\nimport { db } from \"../../Auth/admin\";\nimport axios from \"axios\";\nimport jwt_decode from \"jwt-decode\";\nexport const login = (email, password) => (dispatch, next) => {\n  firebase.auth().signInWithEmailAndPassword(email, password).then(data => {\n    if (data) {\n      return next;\n    }\n  }).catch(err => {\n    dispatch({\n      type: SET_ERRORS,\n      payload: err\n    });\n  });\n};\nexport const multiAuth = (provider, scope) => dispatch => {\n  provider.addScope(`${scope[0]}`);\n  if (scope[1]) provider.addScope(`${scope[1]}`);\n  firebase.auth().signInWithPopup(provider).then(result => {\n    if (result.credential) {\n      const {\n        user\n      } = result;\n      let token;\n      const {\n        displayName,\n        email,\n        xa\n      } = user;\n      token = xa;\n      const {\n        picture,\n        user_id\n      } = jwt_decode(token);\n      const userData = {\n        email: email,\n        username: displayName,\n        profileImage: picture\n      };\n      dispatch(googleSignup(userData, user_id));\n    }\n  }).catch(err => {\n    dispatch({\n      type: SET_ERRORS,\n      payload: err\n    });\n  });\n};\nexport const authenticateGoogle = () => dispatch => {\n  dispatch({\n    type: LOADING_UI\n  });\n  const provider = new firebase.auth.GoogleAuthProvider();\n  let scope = [\"profile\", \"email\"];\n  dispatch(multiAuth(provider, scope));\n}; // export const authenticateGoogle = () => (dispatch) => {\n//   dispatch({type: LOADING_UI})\n//   const provider = new firebase.auth.FacebookAuthProvider()\n//   let scope = [\"user_birthday\"]\n//   dispatch(multiAuth(provider,scope))\n// }\n\nexport const authenticateGithub = () => dispatch => {\n  dispatch({\n    type: LOADING_UI\n  });\n  const provider = new firebase.auth.GithubAuthProvider();\n  let scope = [\"repo\"]; // let email = \"email\"\n\n  dispatch(multiAuth(provider, scope));\n};\nexport const googleSignup = (userData, userId) => dispatch => {\n  dispatch({\n    type: LOADING_UI\n  });\n  axios.post(`/google/${userId}`, userData).then(res => {\n    if (res.data) {\n      return;\n    }\n  }).catch(err => {\n    dispatch({\n      type: SET_ERRORS,\n      payload: err\n    });\n  });\n};\nexport const loginUser = userData => dispatch => {\n  dispatch({\n    type: LOADING_UI\n  });\n  axios.post(\"/login\", userData).then(() => {\n    dispatch(login(userData.email, userData.password));\n  }).catch(err => {\n    dispatch({\n      type: SET_ERRORS,\n      payload: err.response.data\n    });\n  });\n};\nexport const signupUser = newUserData => dispatch => {\n  dispatch({\n    type: LOADING_UI\n  });\n  axios.post(\"/signup\", newUserData).then(() => {\n    dispatch(login(newUserData.email, newUserData.password));\n  }).catch(err => {\n    dispatch({\n      type: SET_ERRORS,\n      payload: err.response.data\n    });\n  });\n};\nexport const setAuthenticatedUser = user => {\n  return {\n    type: SET_AUTHENTICATED\n  };\n};\nexport const getCurrentUser = email => dispatch => {\n  dispatch({\n    type: LOADING_UI\n  });\n  axios.get(`/user/${email}`).then(user => {\n    if (user) {\n      dispatch({\n        type: SET_USER,\n        payload: user.data\n      });\n    }\n  }).then(() => {\n    dispatch({\n      type: STOP_LOADING_UI\n    });\n  }).catch(err => {\n    dispatch({\n      type: SET_ERRORS,\n      payload: err.response.data\n    });\n  });\n};","map":{"version":3,"sources":["/home/alexkhan/Documents/meet-friends/frontend/src/redux/actions/userActions.js"],"names":["LOADING_UI","SET_ERRORS","SET_AUTHENTICATED","SET_USER","STOP_LOADING_UI","firebase","db","axios","jwt_decode","login","email","password","dispatch","next","auth","signInWithEmailAndPassword","then","data","catch","err","type","payload","multiAuth","provider","scope","addScope","signInWithPopup","result","credential","user","token","displayName","xa","picture","user_id","userData","username","profileImage","googleSignup","authenticateGoogle","GoogleAuthProvider","authenticateGithub","GithubAuthProvider","userId","post","res","loginUser","response","signupUser","newUserData","setAuthenticatedUser","getCurrentUser","get"],"mappings":"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","sourcesContent":["import { LOADING_UI, SET_ERRORS, SET_AUTHENTICATED, SET_USER, STOP_LOADING_UI } from \"../store/types\"\nimport firebase from \"../../Auth/firebase\"\nimport { db } from \"../../Auth/admin\"\nimport axios from \"axios\"\nimport jwt_decode from \"jwt-decode\"\n\nexport const login = (email, password) => (dispatch, next) => {\n  firebase.auth().signInWithEmailAndPassword(email, password).then(data => {\n    if (data) {\n      return next\n    }\n  })\n    .catch((err) => {\n      dispatch({\n        type: SET_ERRORS,\n        payload: err\n      })\n    });\n}\n\n\n\n\nexport const multiAuth = (provider, scope) => (dispatch) => {\n  provider.addScope(`${scope[0]}`);\n  if (scope[1]) provider.addScope(`${scope[1]}`)\n  firebase.auth().signInWithPopup(provider)\n    .then((result) => {\n      if (result.credential) {\n        const { user } = result\n        let token;\n        const { displayName, email, xa } = user\n        token = xa\n        const { picture, user_id } = jwt_decode(token)\n\n        const userData = {\n          email: email,\n          username: displayName,\n          profileImage: picture\n        }\n        dispatch(googleSignup(userData, user_id))\n      }\n    })\n    .catch((err) => {\n      dispatch({\n        type: SET_ERRORS,\n        payload: err\n      })\n    });\n\n}\n\n\nexport const authenticateGoogle = () => (dispatch) => {\n  dispatch({ type: LOADING_UI })\n  const provider = new firebase.auth.GoogleAuthProvider()\n  let scope = [\"profile\", \"email\"]\n  dispatch(multiAuth(provider, scope))\n\n}\n\n\n\n// export const authenticateGoogle = () => (dispatch) => {\n//   dispatch({type: LOADING_UI})\n//   const provider = new firebase.auth.FacebookAuthProvider()\n//   let scope = [\"user_birthday\"]\n//   dispatch(multiAuth(provider,scope))\n\n// }\n\nexport const authenticateGithub = () => (dispatch) => {\n  dispatch({ type: LOADING_UI })\n  const provider = new firebase.auth.GithubAuthProvider()\n  let scope = [\"repo\"]\n  // let email = \"email\"\n  dispatch(multiAuth(provider, scope))\n}\n\n\nexport const googleSignup = (userData, userId) => (dispatch) => {\n  dispatch({ type: LOADING_UI })\n  axios.post(`/google/${userId}`, userData)\n    .then(res => {\n      if (res.data) {\n        return\n      }\n    })\n    .catch((err) => {\n      dispatch({\n        type: SET_ERRORS,\n        payload: err\n      })\n    });\n\n}\n\nexport const loginUser = (userData) => (dispatch) => {\n  dispatch({ type: LOADING_UI });\n  axios\n    .post(\"/login\", userData)\n    .then(() => {\n      dispatch(login(userData.email, userData.password))\n\n    })\n    .catch((err) => {\n      dispatch({\n        type: SET_ERRORS,\n        payload: err.response.data,\n      });\n    });\n};\n\nexport const signupUser = (newUserData) => (dispatch) => {\n\n  dispatch({ type: LOADING_UI });\n  axios\n    .post(\"/signup\", newUserData)\n    .then(() => {\n      dispatch(login(newUserData.email, newUserData.password));\n    })\n    .catch((err) => {\n      dispatch({\n        type: SET_ERRORS,\n        payload: err.response.data,\n      });\n    });\n};\n\n\nexport const setAuthenticatedUser = (user) => {\n  return {\n    type: SET_AUTHENTICATED,\n  }\n}\n\nexport const getCurrentUser = (email) => (dispatch) => {\n  dispatch({type: LOADING_UI})\n  axios.get(`/user/${email}`).then(user => {\n    if(user){\n      dispatch({ type: SET_USER, payload: user.data })\n    }\n  }).then(()=> {\n    dispatch({type: STOP_LOADING_UI})\n  })\n  .catch((err) => {\n    dispatch({\n      type: SET_ERRORS,\n      payload: err.response.data,\n    });\n  })\n}"]},"metadata":{},"sourceType":"module"}