{"ast":null,"code":"var _jsxFileName = \"/home/alexkhan/Documents/meet-friends/frontend/src/components/directMessages/directMessages.js\";\nimport React, { Component, Fragment } from \"react\";\nimport { Menu, Icon, Image } from \"semantic-ui-react\";\nimport firebase from \"../../Auth/firebase\";\nimport { setCurrentChannel, setPrivateChannel } from \"../../redux/actions/actions\";\nimport { connect } from \"react-redux\";\n\nclass directMessages extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      user: this.props.user,\n      users: [],\n      userRef: firebase.database().ref(\"users\"),\n      connectedRef: firebase.database().ref(\".info/connected\"),\n      presenceRef: firebase.database().ref(\"presence\")\n    };\n\n    this.addListeners = currentUserUid => {\n      const {\n        userRef,\n        connectedRef,\n        presenceRef\n      } = this.state;\n      let loadedUsers = [];\n      userRef.on(\"child_added\", snap => {\n        let user = snap.val(); // user[\"uid\"] = snap.key;\n\n        user[\"status\"] = \"offline\";\n\n        if (this.state.user && this.state.user.uid !== user[\"userId\"]) {\n          loadedUsers.push(user);\n        }\n\n        this.setState({\n          users: loadedUsers\n        });\n      }); // console.log(loadedUsers)\n\n      connectedRef.on(\"value\", snap => {\n        if (snap.val() === true) {\n          const ref = presenceRef.child(currentUserUid);\n          ref.set(true);\n          ref.onDisconnect().remove(err => {\n            if (err !== null) {\n              console.error(err);\n            }\n          });\n        }\n      });\n      presenceRef.on(\"child_added\", snap => {\n        if (currentUserUid !== snap.key) {\n          this.addStatusToUser(snap.key);\n        }\n      });\n      presenceRef.on(\"child_removed\", snap => {\n        if (currentUserUid !== snap.key) {\n          this.addStatusToUser(snap.key, false);\n        }\n      });\n    };\n\n    this.addStatusToUser = (userId, connected = true) => {\n      const updatedUsers = this.state.users.reduce((acc, user) => {\n        if (user.uid === userId) {\n          user[\"status\"] = `${connected ? \"online\" : \"offline\"}`;\n        }\n\n        return acc.concat(user);\n      }, []);\n      this.setState({\n        users: updatedUsers\n      });\n    };\n\n    this.getChannelId = userId => {\n      const currentUserUid = this.state.user.uid;\n      return userId < currentUserUid ? `${userId}/${currentUserUid}` : `${currentUserUid}/${userId}`;\n    };\n\n    this.isUserOnline = user => user.status === \"online\";\n\n    this.changeChannel = user => {\n      const channelId = this.getChannelId(user.userId);\n      const channelData = {\n        id: channelId,\n        name: user.username\n      };\n      this.props.setCurrentChannel(channelData);\n      this.props.setPrivateChannel();\n    };\n  }\n\n  componentDidMount() {\n    if (this.state.user) {\n      this.addListeners(this.state.user.uid);\n    }\n  }\n\n  render() {\n    const {\n      users\n    } = this.state; // console.log(users);\n\n    return /*#__PURE__*/React.createElement(Menu.Menu, {\n      className: \"menu\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Menu.Item, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Icon, {\n      name: \"mail\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 13\n      }\n    }), \"DIRECT MESSAGES\"), \" \", \"(\", users.length, \")\"), /*#__PURE__*/React.createElement(Menu.Item, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }\n    }, users.map(user => /*#__PURE__*/React.createElement(Menu.Item, {\n      key: user.userId // active={user.uid === activeChannel}\n      ,\n      onClick: () => this.changeChannel(user),\n      style: {\n        opacity: 0.7,\n        fontStyle: \"italic\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Icon, {\n      name: \"circle\",\n      color: this.isUserOnline(user) ? \"green\" : \"red\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 15\n      }\n    }, \" \", /*#__PURE__*/React.createElement(Image, {\n      src: user.profileImage,\n      spaced: \"right\",\n      avatar: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }\n    })), user.username))));\n  }\n\n}\n\nexport default connect(null, {\n  setCurrentChannel\n})(directMessages);","map":{"version":3,"sources":["/home/alexkhan/Documents/meet-friends/frontend/src/components/directMessages/directMessages.js"],"names":["React","Component","Fragment","Menu","Icon","Image","firebase","setCurrentChannel","setPrivateChannel","connect","directMessages","state","user","props","users","userRef","database","ref","connectedRef","presenceRef","addListeners","currentUserUid","loadedUsers","on","snap","val","uid","push","setState","child","set","onDisconnect","remove","err","console","error","key","addStatusToUser","userId","connected","updatedUsers","reduce","acc","concat","getChannelId","isUserOnline","status","changeChannel","channelId","channelData","id","name","username","componentDidMount","render","length","map","opacity","fontStyle","profileImage"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,IAAT,EAAeC,IAAf,EAAqBC,KAArB,QAAkC,mBAAlC;AACA,OAAOC,QAAP,MAAqB,qBAArB;AACA,SAASC,iBAAT,EAA2BC,iBAA3B,QAAoD,6BAApD;AACA,SAASC,OAAT,QAAwB,aAAxB;;AAEA,MAAMC,cAAN,SAA6BT,SAA7B,CAAuC;AAAA;AAAA;AAAA,SACrCU,KADqC,GAC7B;AACNC,MAAAA,IAAI,EAAE,KAAKC,KAAL,CAAWD,IADX;AAENE,MAAAA,KAAK,EAAE,EAFD;AAGNC,MAAAA,OAAO,EAAET,QAAQ,CAACU,QAAT,GAAoBC,GAApB,CAAwB,OAAxB,CAHH;AAINC,MAAAA,YAAY,EAAEZ,QAAQ,CAACU,QAAT,GAAoBC,GAApB,CAAwB,iBAAxB,CAJR;AAKNE,MAAAA,WAAW,EAAEb,QAAQ,CAACU,QAAT,GAAoBC,GAApB,CAAwB,UAAxB;AALP,KAD6B;;AAAA,SAcrCG,YAdqC,GAcrBC,cAAD,IAAoB;AACjC,YAAM;AAAEN,QAAAA,OAAF;AAAWG,QAAAA,YAAX;AAAyBC,QAAAA;AAAzB,UAAyC,KAAKR,KAApD;AACA,UAAIW,WAAW,GAAG,EAAlB;AACAP,MAAAA,OAAO,CAACQ,EAAR,CAAW,aAAX,EAA2BC,IAAD,IAAU;AAClC,YAAIZ,IAAI,GAAGY,IAAI,CAACC,GAAL,EAAX,CADkC,CAElC;;AACAb,QAAAA,IAAI,CAAC,QAAD,CAAJ,GAAiB,SAAjB;;AACA,YAAI,KAAKD,KAAL,CAAWC,IAAX,IAAmB,KAAKD,KAAL,CAAWC,IAAX,CAAgBc,GAAhB,KAAwBd,IAAI,CAAC,QAAD,CAAnD,EAA+D;AAC7DU,UAAAA,WAAW,CAACK,IAAZ,CAAiBf,IAAjB;AACD;;AAED,aAAKgB,QAAL,CAAc;AAAEd,UAAAA,KAAK,EAAEQ;AAAT,SAAd;AACD,OATD,EAHiC,CAajC;;AACAJ,MAAAA,YAAY,CAACK,EAAb,CAAgB,OAAhB,EAA0BC,IAAD,IAAU;AACjC,YAAIA,IAAI,CAACC,GAAL,OAAe,IAAnB,EAAyB;AACvB,gBAAMR,GAAG,GAAGE,WAAW,CAACU,KAAZ,CAAkBR,cAAlB,CAAZ;AACAJ,UAAAA,GAAG,CAACa,GAAJ,CAAQ,IAAR;AACAb,UAAAA,GAAG,CAACc,YAAJ,GAAmBC,MAAnB,CAA2BC,GAAD,IAAS;AACjC,gBAAIA,GAAG,KAAK,IAAZ,EAAkB;AAChBC,cAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACD;AACF,WAJD;AAKD;AACF,OAVD;AAYAd,MAAAA,WAAW,CAACI,EAAZ,CAAe,aAAf,EAA+BC,IAAD,IAAU;AACtC,YAAIH,cAAc,KAAKG,IAAI,CAACY,GAA5B,EAAiC;AAC/B,eAAKC,eAAL,CAAqBb,IAAI,CAACY,GAA1B;AACD;AACF,OAJD;AAMAjB,MAAAA,WAAW,CAACI,EAAZ,CAAe,eAAf,EAAiCC,IAAD,IAAU;AACxC,YAAIH,cAAc,KAAKG,IAAI,CAACY,GAA5B,EAAiC;AAC/B,eAAKC,eAAL,CAAqBb,IAAI,CAACY,GAA1B,EAA+B,KAA/B;AACD;AACF,OAJD;AAKD,KAnDoC;;AAAA,SAqDrCC,eArDqC,GAqDnB,CAACC,MAAD,EAASC,SAAS,GAAG,IAArB,KAA8B;AAC9C,YAAMC,YAAY,GAAG,KAAK7B,KAAL,CAAWG,KAAX,CAAiB2B,MAAjB,CAAwB,CAACC,GAAD,EAAM9B,IAAN,KAAe;AAC1D,YAAIA,IAAI,CAACc,GAAL,KAAaY,MAAjB,EAAyB;AACvB1B,UAAAA,IAAI,CAAC,QAAD,CAAJ,GAAkB,GAAE2B,SAAS,GAAG,QAAH,GAAc,SAAU,EAArD;AACD;;AACD,eAAOG,GAAG,CAACC,MAAJ,CAAW/B,IAAX,CAAP;AACD,OALoB,EAKlB,EALkB,CAArB;AAMA,WAAKgB,QAAL,CAAc;AAAEd,QAAAA,KAAK,EAAE0B;AAAT,OAAd;AACD,KA7DoC;;AAAA,SA+DrCI,YA/DqC,GA+DrBN,MAAD,IAAY;AACzB,YAAMjB,cAAc,GAAG,KAAKV,KAAL,CAAWC,IAAX,CAAgBc,GAAvC;AACA,aAAOY,MAAM,GAAGjB,cAAT,GACF,GAAEiB,MAAO,IAAGjB,cAAe,EADzB,GAEF,GAAEA,cAAe,IAAGiB,MAAO,EAFhC;AAGD,KApEoC;;AAAA,SAsErCO,YAtEqC,GAsErBjC,IAAD,IAAUA,IAAI,CAACkC,MAAL,KAAgB,QAtEJ;;AAAA,SAuErCC,aAvEqC,GAuEpBnC,IAAD,IAAU;AACxB,YAAMoC,SAAS,GAAG,KAAKJ,YAAL,CAAkBhC,IAAI,CAAC0B,MAAvB,CAAlB;AACA,YAAMW,WAAW,GAAG;AAClBC,QAAAA,EAAE,EAAEF,SADc;AAElBG,QAAAA,IAAI,EAAEvC,IAAI,CAACwC;AAFO,OAApB;AAIA,WAAKvC,KAAL,CAAWN,iBAAX,CAA6B0C,WAA7B;AACA,WAAKpC,KAAL,CAAWL,iBAAX;AACD,KA/EoC;AAAA;;AASrC6C,EAAAA,iBAAiB,GAAG;AAClB,QAAI,KAAK1C,KAAL,CAAWC,IAAf,EAAqB;AACnB,WAAKQ,YAAL,CAAkB,KAAKT,KAAL,CAAWC,IAAX,CAAgBc,GAAlC;AACD;AACF;;AAoED4B,EAAAA,MAAM,GAAG;AACP,UAAM;AAAExC,MAAAA;AAAF,QAAY,KAAKH,KAAvB,CADO,CAEP;;AAEA,wBACE,oBAAC,IAAD,CAAM,IAAN;AAAW,MAAA,SAAS,EAAC,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,IAAD,CAAM,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,IAAD;AAAM,MAAA,IAAI,EAAC,MAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,oBADF,EAIU,GAJV,OAKIG,KAAK,CAACyC,MALV,MADF,eAQE,oBAAC,IAAD,CAAM,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGzC,KAAK,CAAC0C,GAAN,CAAW5C,IAAD,iBACT,oBAAC,IAAD,CAAM,IAAN;AACE,MAAA,GAAG,EAAEA,IAAI,CAAC0B,MADZ,CAEE;AAFF;AAGE,MAAA,OAAO,EAAE,MAAM,KAAKS,aAAL,CAAmBnC,IAAnB,CAHjB;AAIE,MAAA,KAAK,EAAE;AAAE6C,QAAAA,OAAO,EAAE,GAAX;AAAgBC,QAAAA,SAAS,EAAE;AAA3B,OAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAME,oBAAC,IAAD;AACE,MAAA,IAAI,EAAC,QADP;AAEE,MAAA,KAAK,EAAE,KAAKb,YAAL,CAAkBjC,IAAlB,IAA0B,OAA1B,GAAoC,KAF7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANF,eAUE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,GADH,eAEE,oBAAC,KAAD;AAAO,MAAA,GAAG,EAAEA,IAAI,CAAC+C,YAAjB;AAA+B,MAAA,MAAM,EAAC,OAAtC;AAA8C,MAAA,MAAM,MAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CAVF,EAcG/C,IAAI,CAACwC,QAdR,CADD,CADH,CARF,CADF;AA+BD;;AApHoC;;AAuHvC,eAAe3C,OAAO,CAAC,IAAD,EAAO;AAAEF,EAAAA;AAAF,CAAP,CAAP,CAAqCG,cAArC,CAAf","sourcesContent":["import React, { Component, Fragment } from \"react\";\nimport { Menu, Icon, Image } from \"semantic-ui-react\";\nimport firebase from \"../../Auth/firebase\";\nimport { setCurrentChannel,setPrivateChannel } from \"../../redux/actions/actions\";\nimport { connect } from \"react-redux\";\n\nclass directMessages extends Component {\n  state = {\n    user: this.props.user,\n    users: [],\n    userRef: firebase.database().ref(\"users\"),\n    connectedRef: firebase.database().ref(\".info/connected\"),\n    presenceRef: firebase.database().ref(\"presence\"),\n  };\n\n  componentDidMount() {\n    if (this.state.user) {\n      this.addListeners(this.state.user.uid);\n    }\n  }\n  addListeners = (currentUserUid) => {\n    const { userRef, connectedRef, presenceRef } = this.state;\n    let loadedUsers = [];\n    userRef.on(\"child_added\", (snap) => {\n      let user = snap.val();\n      // user[\"uid\"] = snap.key;\n      user[\"status\"] = \"offline\";\n      if (this.state.user && this.state.user.uid !== user[\"userId\"]) {\n        loadedUsers.push(user);\n      }\n\n      this.setState({ users: loadedUsers });\n    });\n    // console.log(loadedUsers)\n    connectedRef.on(\"value\", (snap) => {\n      if (snap.val() === true) {\n        const ref = presenceRef.child(currentUserUid);\n        ref.set(true);\n        ref.onDisconnect().remove((err) => {\n          if (err !== null) {\n            console.error(err);\n          }\n        });\n      }\n    });\n\n    presenceRef.on(\"child_added\", (snap) => {\n      if (currentUserUid !== snap.key) {\n        this.addStatusToUser(snap.key);\n      }\n    });\n\n    presenceRef.on(\"child_removed\", (snap) => {\n      if (currentUserUid !== snap.key) {\n        this.addStatusToUser(snap.key, false);\n      }\n    });\n  };\n\n  addStatusToUser = (userId, connected = true) => {\n    const updatedUsers = this.state.users.reduce((acc, user) => {\n      if (user.uid === userId) {\n        user[\"status\"] = `${connected ? \"online\" : \"offline\"}`;\n      }\n      return acc.concat(user);\n    }, []);\n    this.setState({ users: updatedUsers });\n  };\n\n  getChannelId = (userId) => {\n    const currentUserUid = this.state.user.uid;\n    return userId < currentUserUid\n      ? `${userId}/${currentUserUid}`\n      : `${currentUserUid}/${userId}`;\n  };\n\n  isUserOnline = (user) => user.status === \"online\";\n  changeChannel = (user) => {\n    const channelId = this.getChannelId(user.userId);\n    const channelData = {\n      id: channelId,\n      name: user.username,\n    };\n    this.props.setCurrentChannel(channelData);\n    this.props.setPrivateChannel()\n  };\n\n  render() {\n    const { users } = this.state;\n    // console.log(users);\n\n    return (\n      <Menu.Menu className=\"menu\">\n        <Menu.Item>\n          <span>\n            <Icon name=\"mail\" />\n            DIRECT MESSAGES\n          </span>{\" \"}\n          ({users.length})\n        </Menu.Item>\n        <Menu.Item>\n          {users.map((user) => (\n            <Menu.Item\n              key={user.userId}\n              // active={user.uid === activeChannel}\n              onClick={() => this.changeChannel(user)}\n              style={{ opacity: 0.7, fontStyle: \"italic\" }}\n            >\n              <Icon\n                name=\"circle\"\n                color={this.isUserOnline(user) ? \"green\" : \"red\"}\n              />\n              <span>\n                {\" \"}\n                <Image src={user.profileImage} spaced=\"right\" avatar />\n              </span>\n              {user.username}\n            </Menu.Item>\n          ))}\n        </Menu.Item>\n      </Menu.Menu>\n    );\n  }\n}\n\nexport default connect(null, { setCurrentChannel })(directMessages);\n"]},"metadata":{},"sourceType":"module"}