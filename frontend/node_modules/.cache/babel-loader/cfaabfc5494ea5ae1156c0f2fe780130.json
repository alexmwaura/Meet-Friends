{"ast":null,"code":"var _jsxFileName = \"/home/alexkhan/Documents/meet-friends/frontend/src/components/google/googleAuth.js\";\nimport React, { Component } from 'react';\nimport * as firebase from \"firebase\";\nimport * as admin from \"firebase-admin\";\nimport Config from \"../../config/config\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport serviceAccount from \"../../config/config.json\";\nfirebase.initializeApp(Config);\nvar provider = new firebase.auth.GoogleAuthProvider();\nprovider.addScope('profile');\nprovider.addScope('email');\nadmin.initializeApp({\n  // credential: admin.credential.cert(),\n  storageBucket: \"portfolio-alex-eb3ef.appspot.com\",\n  databaseURL: \"https://portfolio-alex-eb3ef.firebaseio.com\"\n});\nconst db = admin.firestore();\n\nclass googleAuth extends Component {\n  constructor() {\n    super();\n    this.state = {\n      username: \"\",\n      email: \"\",\n      errors: {}\n    };\n  }\n\n  handleLogin() {\n    firebase.auth().signInWithPopup(provider).then(result => {\n      if (result.credential) {\n        var token = result.credential.accessToken;\n        var user = result.user;\n        const {\n          displayName,\n          email\n        } = user;\n        console.log(displayName, email);\n        this.setState({\n          username: displayName,\n          email: email\n        });\n      }\n    }).then(() => {\n      db.doc(`/users/${this.state.email}`).get().then(user => {\n        if (user.exists) {\n          console.log({\n            success: \"User loged in\"\n          });\n        } else {\n          db.doc(`/users/${this.state.email}`).set({\n            email: this.state.email,\n            username: this.state.username\n          });\n        }\n      });\n    }).catch(err => {\n      console.log(err.message);\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.handleLogin(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }\n    }, \"Google\");\n  }\n\n}\n\nexport default googleAuth;","map":{"version":3,"sources":["/home/alexkhan/Documents/meet-friends/frontend/src/components/google/googleAuth.js"],"names":["React","Component","firebase","admin","Config","IconButton","serviceAccount","initializeApp","provider","auth","GoogleAuthProvider","addScope","storageBucket","databaseURL","db","firestore","googleAuth","constructor","state","username","email","errors","handleLogin","signInWithPopup","then","result","credential","token","accessToken","user","displayName","console","log","setState","doc","get","exists","success","set","catch","err","message","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,KAAKC,QAAZ,MAA0B,UAA1B;AACA,OAAO,KAAKC,KAAZ,MAAuB,gBAAvB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,cAAP,MAA2B,0BAA3B;AAEAJ,QAAQ,CAACK,aAAT,CAAuBH,MAAvB;AACA,IAAII,QAAQ,GAAG,IAAIN,QAAQ,CAACO,IAAT,CAAcC,kBAAlB,EAAf;AACAF,QAAQ,CAACG,QAAT,CAAkB,SAAlB;AACAH,QAAQ,CAACG,QAAT,CAAkB,OAAlB;AAEAR,KAAK,CAACI,aAAN,CAAoB;AAChB;AACAK,EAAAA,aAAa,EAAE,kCAFC;AAGhBC,EAAAA,WAAW,EAAE;AAHG,CAApB;AAOA,MAAMC,EAAE,GAAGX,KAAK,CAACY,SAAN,EAAX;;AAIA,MAAMC,UAAN,SAAyBf,SAAzB,CAAmC;AAE/BgB,EAAAA,WAAW,GAAE;AACT;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,QAAQ,EAAE,EADD;AAETC,MAAAA,KAAK,EAAE,EAFE;AAGTC,MAAAA,MAAM,EAAE;AAHC,KAAb;AAKH;;AAEDC,EAAAA,WAAW,GAAE;AAETpB,IAAAA,QAAQ,CAACO,IAAT,GAAgBc,eAAhB,CAAgCf,QAAhC,EAA0CgB,IAA1C,CAAgDC,MAAD,IAAW;AACtD,UAAIA,MAAM,CAACC,UAAX,EAAuB;AACrB,YAAIC,KAAK,GAAGF,MAAM,CAACC,UAAP,CAAkBE,WAA9B;AACA,YAAIC,IAAI,GAAGJ,MAAM,CAACI,IAAlB;AAEA,cAAO;AAACC,UAAAA,WAAD;AAAcV,UAAAA;AAAd,YAAuBS,IAA9B;AACAE,QAAAA,OAAO,CAACC,GAAR,CAAYF,WAAZ,EAAyBV,KAAzB;AACA,aAAKa,QAAL,CAAc;AAACd,UAAAA,QAAQ,EAAEW,WAAX;AAAwBV,UAAAA,KAAK,EAAEA;AAA/B,SAAd;AACD;AACF,KATH,EASKI,IATL,CASU,MAAK;AACTV,MAAAA,EAAE,CAACoB,GAAH,CAAQ,UAAS,KAAKhB,KAAL,CAAWE,KAAM,EAAlC,EAAqCe,GAArC,GAA2CX,IAA3C,CAAgDK,IAAI,IAAG;AACnD,YAAGA,IAAI,CAACO,MAAR,EAAe;AACXL,UAAAA,OAAO,CAACC,GAAR,CAAY;AAACK,YAAAA,OAAO,EAAE;AAAV,WAAZ;AACH,SAFD,MAGI;AACAvB,UAAAA,EAAE,CAACoB,GAAH,CAAQ,UAAS,KAAKhB,KAAL,CAAWE,KAAM,EAAlC,EAAqCkB,GAArC,CAAyC;AAAClB,YAAAA,KAAK,EAAE,KAAKF,KAAL,CAAWE,KAAnB;AAAyBD,YAAAA,QAAQ,EAAE,KAAKD,KAAL,CAAWC;AAA9C,WAAzC;AACH;AACJ,OAPD;AAQH,KAlBH,EAmBGoB,KAnBH,CAmBSC,GAAG,IAAG;AACTT,MAAAA,OAAO,CAACC,GAAR,CAAYQ,GAAG,CAACC,OAAhB;AACH,KArBH;AAsBH;;AAGDC,EAAAA,MAAM,GAAG;AACL,wBACI;AAAQ,MAAA,OAAO,EAAE,MAAK,KAAKpB,WAAL,EAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ;AAKH;;AA5C8B;;AA+CnC,eAAeN,UAAf","sourcesContent":["import React, { Component } from 'react'\nimport * as firebase from \"firebase\"\nimport * as admin from \"firebase-admin\"\nimport Config from \"../../config/config\"\nimport IconButton from \"@material-ui/core/IconButton\"\nimport serviceAccount from \"../../config/config.json\"\n\nfirebase.initializeApp(Config)\nvar provider = new firebase.auth.GoogleAuthProvider()\nprovider.addScope('profile');\nprovider.addScope('email');\n\nadmin.initializeApp({\n    // credential: admin.credential.cert(),\n    storageBucket: \"portfolio-alex-eb3ef.appspot.com\",\n    databaseURL: \"https://portfolio-alex-eb3ef.firebaseio.com\"\n\n})\n\nconst db = admin.firestore()\n\n\n\nclass googleAuth extends Component {\n\n    constructor(){\n        super()\n        this.state = {\n            username: \"\",\n            email: \"\",\n            errors: {}\n        }\n    }\n\n    handleLogin(){\n\n        firebase.auth().signInWithPopup(provider).then((result) =>{\n            if (result.credential) {\n              var token = result.credential.accessToken;\n              var user = result.user;\n                \n              const  {displayName, email} = user\n              console.log(displayName, email)\n              this.setState({username: displayName, email: email})\n            }     \n          }).then(()=> {\n              db.doc(`/users/${this.state.email}`).get().then(user=> {\n                  if(user.exists){\n                      console.log({success: \"User loged in\"})\n                  }\n                  else{\n                      db.doc(`/users/${this.state.email}`).set({email: this.state.email,username: this.state.username})\n                  }\n              })\n          })\n          .catch(err=> {\n              console.log(err.message)\n          })\n    }\n\n\n    render() {\n        return (\n            <button onClick={()=> this.handleLogin()}>\n               Google \n            </button>\n        )\n    }\n}\n\nexport default googleAuth\n"]},"metadata":{},"sourceType":"module"}