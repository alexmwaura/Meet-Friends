{"ast":null,"code":"import { LOADING_USER, LOADING_UI, SET_GOOGLE_USER } from \"../store/types\";\nimport * as firebase from \"firebase\";\nimport Config from \"../../config/config\";\nimport axios from \"axios\";\nimport jwt_decode from \"jwt-decode\";\nfirebase.initializeApp(Config);\nexport const multiAuth = (provider, firstScope, secondScope) => dispatch => {\n  provider.addScope(`${firstScope}`); // provider.addScope(`${secondScope}`);\n\n  firebase.auth().signInWithPopup(provider).then(result => {\n    if (result.credential) {\n      const {\n        user\n      } = result;\n      let token;\n      console.log(user);\n      const {\n        displayName,\n        email,\n        xa\n      } = user;\n      firebase.auth().c;\n      token = xa;\n      localStorage.setItem(\"token\", token);\n      const {\n        picture,\n        user_id\n      } = jwt_decode(token);\n      const userData = {\n        email: email,\n        username: displayName,\n        profileImage: picture\n      };\n      dispatch(googleSignup(userData, user_id));\n    }\n  }).catch(err => console.log(err));\n}; // export const authenticateGoogle = () => (dispatch) => {\n//     dispatch({type: LOADING_UI})\n//     const provider = new firebase.auth.GoogleAuthProvider()\n//     let profile = \"profile\"\n//     let email = \"email\"\n//     dispatch(multiAuth(provider,profile,email))\n// }\n\nexport const authenticateGoogle = () => dispatch => {\n  dispatch({\n    type: LOADING_UI\n  });\n  const provider = new firebase.auth.GithubAuthProvider();\n  let repo = \"repo\"; // let email = \"email\"\n\n  dispatch(multiAuth(provider, repo));\n};\nexport const googleSignup = (userData, userId) => dispatch => {\n  dispatch({\n    type: LOADING_USER\n  });\n  axios.post(`/google/${userId}`, userData).then(res => {\n    dispatch({\n      type: SET_GOOGLE_USER,\n      payload: res.data\n    }); // window.location.href = \"/\"\n  }).catch(err => console.log(err));\n};","map":{"version":3,"sources":["/home/alexkhan/Documents/meet-friends/frontend/src/redux/actions/userActions.js"],"names":["LOADING_USER","LOADING_UI","SET_GOOGLE_USER","firebase","Config","axios","jwt_decode","initializeApp","multiAuth","provider","firstScope","secondScope","dispatch","addScope","auth","signInWithPopup","then","result","credential","user","token","console","log","displayName","email","xa","c","localStorage","setItem","picture","user_id","userData","username","profileImage","googleSignup","catch","err","authenticateGoogle","type","GithubAuthProvider","repo","userId","post","res","payload","data"],"mappings":"AAAA,SAAQA,YAAR,EAAqBC,UAArB,EAAiCC,eAAjC,QAAuD,gBAAvD;AACA,OAAO,KAAKC,QAAZ,MAA0B,UAA1B;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAEAH,QAAQ,CAACI,aAAT,CAAuBH,MAAvB;AAGA,OAAO,MAAMI,SAAS,GAAG,CAACC,QAAD,EAAUC,UAAV,EAAqBC,WAArB,KAAsCC,QAAD,IAAa;AACvEH,EAAAA,QAAQ,CAACI,QAAT,CAAmB,GAAEH,UAAW,EAAhC,EADuE,CAEvE;;AACAP,EAAAA,QAAQ,CAACW,IAAT,GAAgBC,eAAhB,CAAgCN,QAAhC,EACCO,IADD,CACOC,MAAD,IAAW;AACb,QAAIA,MAAM,CAACC,UAAX,EAAuB;AACvB,YAAM;AAACC,QAAAA;AAAD,UAASF,MAAf;AACA,UAAIG,KAAJ;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACA,YAAO;AAACI,QAAAA,WAAD;AAAcC,QAAAA,KAAd;AAAoBC,QAAAA;AAApB,UAA0BN,IAAjC;AACAhB,MAAAA,QAAQ,CAACW,IAAT,GAAgBY,CAAhB;AACAN,MAAAA,KAAK,GAAGK,EAAR;AACAE,MAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BR,KAA9B;AACA,YAAM;AAACS,QAAAA,OAAD;AAASC,QAAAA;AAAT,UAAqBxB,UAAU,CAACc,KAAD,CAArC;AAEA,YAAMW,QAAQ,GAAG;AACZP,QAAAA,KAAK,EAAEA,KADK;AAEZQ,QAAAA,QAAQ,EAAET,WAFE;AAGZU,QAAAA,YAAY,EAAEJ;AAHF,OAAjB;AAMAjB,MAAAA,QAAQ,CAACsB,YAAY,CAACH,QAAD,EAAUD,OAAV,CAAb,CAAR;AACC;AACF,GApBH,EAqBCK,KArBD,CAqBQC,GAAD,IAASf,OAAO,CAACC,GAAR,CAAYc,GAAZ,CArBhB;AAuBH,CA1BM,C,CA6BP;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,OAAO,MAAMC,kBAAkB,GAAG,MAAOzB,QAAD,IAAc;AAClDA,EAAAA,QAAQ,CAAC;AAAC0B,IAAAA,IAAI,EAAErC;AAAP,GAAD,CAAR;AACA,QAAMQ,QAAQ,GAAG,IAAIN,QAAQ,CAACW,IAAT,CAAcyB,kBAAlB,EAAjB;AACA,MAAIC,IAAI,GAAG,MAAX,CAHkD,CAIlD;;AACA5B,EAAAA,QAAQ,CAACJ,SAAS,CAACC,QAAD,EAAU+B,IAAV,CAAV,CAAR;AACH,CANM;AASP,OAAO,MAAMN,YAAY,GAAG,CAACH,QAAD,EAAUU,MAAV,KAAsB7B,QAAD,IAAc;AAC3DA,EAAAA,QAAQ,CAAC;AAAC0B,IAAAA,IAAI,EAAEtC;AAAP,GAAD,CAAR;AACAK,EAAAA,KAAK,CAACqC,IAAN,CAAY,WAAUD,MAAO,EAA7B,EAA+BV,QAA/B,EACCf,IADD,CACM2B,GAAG,IAAG;AACR/B,IAAAA,QAAQ,CAAC;AACL0B,MAAAA,IAAI,EAAEpC,eADD;AAEL0C,MAAAA,OAAO,EAAED,GAAG,CAACE;AAFR,KAAD,CAAR,CADQ,CAMR;AACH,GARD,EASCV,KATD,CASQC,GAAD,IAASf,OAAO,CAACC,GAAR,CAAYc,GAAZ,CAThB;AAWH,CAbM","sourcesContent":["import {LOADING_USER,LOADING_UI, SET_GOOGLE_USER} from \"../store/types\"\nimport * as firebase from \"firebase\"\nimport Config from \"../../config/config\"\nimport axios from \"axios\"\nimport jwt_decode from \"jwt-decode\"\n\nfirebase.initializeApp(Config)\n\n\nexport const multiAuth = (provider,firstScope,secondScope) => (dispatch)=> {\n    provider.addScope(`${firstScope}`);\n    // provider.addScope(`${secondScope}`);\n    firebase.auth().signInWithPopup(provider)\n    .then((result) =>{\n        if (result.credential) {\n        const {user} = result\n        let token;   \n        console.log(user)   \n        const  {displayName, email,xa} = user\n        firebase.auth().c\n        token = xa\n        localStorage.setItem(\"token\", token)\n        const {picture,user_id} =  jwt_decode(token)   \n\n        const userData = {\n             email: email,\n             username: displayName,\n             profileImage: picture\n        }\n       \n        dispatch(googleSignup(userData,user_id))\n        }   \n      }) \n    .catch((err) => console.log(err));\n\n}\n\n\n// export const authenticateGoogle = () => (dispatch) => {\n//     dispatch({type: LOADING_UI})\n//     const provider = new firebase.auth.GoogleAuthProvider()\n//     let profile = \"profile\"\n//     let email = \"email\"\n//     dispatch(multiAuth(provider,profile,email))\n\n// }\n\nexport const authenticateGoogle = () => (dispatch) => {\n    dispatch({type: LOADING_UI})\n    const provider = new firebase.auth.GithubAuthProvider()\n    let repo = \"repo\"\n    // let email = \"email\"\n    dispatch(multiAuth(provider,repo))\n}\n\n\nexport const googleSignup = (userData,userId) => (dispatch) => {\n    dispatch({type: LOADING_USER})\n    axios.post(`/google/${userId}`,userData)\n    .then(res=> {\n        dispatch({\n            type: SET_GOOGLE_USER,\n            payload: res.data\n        })\n        \n        // window.location.href = \"/\"\n    })\n    .catch((err) => console.log(err));\n\n}"]},"metadata":{},"sourceType":"module"}